
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model sucursales
 * 
 */
export type sucursales = $Result.DefaultSelection<Prisma.$sucursalesPayload>
/**
 * Model ciudades
 * 
 */
export type ciudades = $Result.DefaultSelection<Prisma.$ciudadesPayload>
/**
 * Model metodoPago
 * 
 */
export type metodoPago = $Result.DefaultSelection<Prisma.$metodoPagoPayload>
/**
 * Model celulares
 * 
 */
export type celulares = $Result.DefaultSelection<Prisma.$celularesPayload>
/**
 * Model computadores
 * 
 */
export type computadores = $Result.DefaultSelection<Prisma.$computadoresPayload>
/**
 * Model televisores
 * 
 */
export type televisores = $Result.DefaultSelection<Prisma.$televisoresPayload>
/**
 * Model consolas
 * 
 */
export type consolas = $Result.DefaultSelection<Prisma.$consolasPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Sucursales
 * const sucursales = await prisma.sucursales.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Sucursales
   * const sucursales = await prisma.sucursales.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.sucursales`: Exposes CRUD operations for the **sucursales** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sucursales
    * const sucursales = await prisma.sucursales.findMany()
    * ```
    */
  get sucursales(): Prisma.sucursalesDelegate<ExtArgs>;

  /**
   * `prisma.ciudades`: Exposes CRUD operations for the **ciudades** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ciudades
    * const ciudades = await prisma.ciudades.findMany()
    * ```
    */
  get ciudades(): Prisma.ciudadesDelegate<ExtArgs>;

  /**
   * `prisma.metodoPago`: Exposes CRUD operations for the **metodoPago** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MetodoPagos
    * const metodoPagos = await prisma.metodoPago.findMany()
    * ```
    */
  get metodoPago(): Prisma.metodoPagoDelegate<ExtArgs>;

  /**
   * `prisma.celulares`: Exposes CRUD operations for the **celulares** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Celulares
    * const celulares = await prisma.celulares.findMany()
    * ```
    */
  get celulares(): Prisma.celularesDelegate<ExtArgs>;

  /**
   * `prisma.computadores`: Exposes CRUD operations for the **computadores** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Computadores
    * const computadores = await prisma.computadores.findMany()
    * ```
    */
  get computadores(): Prisma.computadoresDelegate<ExtArgs>;

  /**
   * `prisma.televisores`: Exposes CRUD operations for the **televisores** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Televisores
    * const televisores = await prisma.televisores.findMany()
    * ```
    */
  get televisores(): Prisma.televisoresDelegate<ExtArgs>;

  /**
   * `prisma.consolas`: Exposes CRUD operations for the **consolas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Consolas
    * const consolas = await prisma.consolas.findMany()
    * ```
    */
  get consolas(): Prisma.consolasDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.14.0
   * Query Engine version: e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    sucursales: 'sucursales',
    ciudades: 'ciudades',
    metodoPago: 'metodoPago',
    celulares: 'celulares',
    computadores: 'computadores',
    televisores: 'televisores',
    consolas: 'consolas'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'sucursales' | 'ciudades' | 'metodoPago' | 'celulares' | 'computadores' | 'televisores' | 'consolas'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      sucursales: {
        payload: Prisma.$sucursalesPayload<ExtArgs>
        fields: Prisma.sucursalesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.sucursalesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sucursalesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.sucursalesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sucursalesPayload>
          }
          findFirst: {
            args: Prisma.sucursalesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sucursalesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.sucursalesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sucursalesPayload>
          }
          findMany: {
            args: Prisma.sucursalesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sucursalesPayload>[]
          }
          create: {
            args: Prisma.sucursalesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sucursalesPayload>
          }
          createMany: {
            args: Prisma.sucursalesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.sucursalesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sucursalesPayload>
          }
          update: {
            args: Prisma.sucursalesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sucursalesPayload>
          }
          deleteMany: {
            args: Prisma.sucursalesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.sucursalesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.sucursalesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$sucursalesPayload>
          }
          aggregate: {
            args: Prisma.SucursalesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSucursales>
          }
          groupBy: {
            args: Prisma.sucursalesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SucursalesGroupByOutputType>[]
          }
          count: {
            args: Prisma.sucursalesCountArgs<ExtArgs>,
            result: $Utils.Optional<SucursalesCountAggregateOutputType> | number
          }
        }
      }
      ciudades: {
        payload: Prisma.$ciudadesPayload<ExtArgs>
        fields: Prisma.ciudadesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ciudadesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ciudadesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ciudadesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ciudadesPayload>
          }
          findFirst: {
            args: Prisma.ciudadesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ciudadesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ciudadesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ciudadesPayload>
          }
          findMany: {
            args: Prisma.ciudadesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ciudadesPayload>[]
          }
          create: {
            args: Prisma.ciudadesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ciudadesPayload>
          }
          createMany: {
            args: Prisma.ciudadesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ciudadesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ciudadesPayload>
          }
          update: {
            args: Prisma.ciudadesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ciudadesPayload>
          }
          deleteMany: {
            args: Prisma.ciudadesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ciudadesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ciudadesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ciudadesPayload>
          }
          aggregate: {
            args: Prisma.CiudadesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCiudades>
          }
          groupBy: {
            args: Prisma.ciudadesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CiudadesGroupByOutputType>[]
          }
          count: {
            args: Prisma.ciudadesCountArgs<ExtArgs>,
            result: $Utils.Optional<CiudadesCountAggregateOutputType> | number
          }
        }
      }
      metodoPago: {
        payload: Prisma.$metodoPagoPayload<ExtArgs>
        fields: Prisma.metodoPagoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.metodoPagoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$metodoPagoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.metodoPagoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$metodoPagoPayload>
          }
          findFirst: {
            args: Prisma.metodoPagoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$metodoPagoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.metodoPagoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$metodoPagoPayload>
          }
          findMany: {
            args: Prisma.metodoPagoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$metodoPagoPayload>[]
          }
          create: {
            args: Prisma.metodoPagoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$metodoPagoPayload>
          }
          createMany: {
            args: Prisma.metodoPagoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.metodoPagoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$metodoPagoPayload>
          }
          update: {
            args: Prisma.metodoPagoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$metodoPagoPayload>
          }
          deleteMany: {
            args: Prisma.metodoPagoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.metodoPagoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.metodoPagoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$metodoPagoPayload>
          }
          aggregate: {
            args: Prisma.MetodoPagoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMetodoPago>
          }
          groupBy: {
            args: Prisma.metodoPagoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MetodoPagoGroupByOutputType>[]
          }
          count: {
            args: Prisma.metodoPagoCountArgs<ExtArgs>,
            result: $Utils.Optional<MetodoPagoCountAggregateOutputType> | number
          }
        }
      }
      celulares: {
        payload: Prisma.$celularesPayload<ExtArgs>
        fields: Prisma.celularesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.celularesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$celularesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.celularesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$celularesPayload>
          }
          findFirst: {
            args: Prisma.celularesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$celularesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.celularesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$celularesPayload>
          }
          findMany: {
            args: Prisma.celularesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$celularesPayload>[]
          }
          create: {
            args: Prisma.celularesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$celularesPayload>
          }
          createMany: {
            args: Prisma.celularesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.celularesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$celularesPayload>
          }
          update: {
            args: Prisma.celularesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$celularesPayload>
          }
          deleteMany: {
            args: Prisma.celularesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.celularesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.celularesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$celularesPayload>
          }
          aggregate: {
            args: Prisma.CelularesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCelulares>
          }
          groupBy: {
            args: Prisma.celularesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CelularesGroupByOutputType>[]
          }
          count: {
            args: Prisma.celularesCountArgs<ExtArgs>,
            result: $Utils.Optional<CelularesCountAggregateOutputType> | number
          }
        }
      }
      computadores: {
        payload: Prisma.$computadoresPayload<ExtArgs>
        fields: Prisma.computadoresFieldRefs
        operations: {
          findUnique: {
            args: Prisma.computadoresFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$computadoresPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.computadoresFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$computadoresPayload>
          }
          findFirst: {
            args: Prisma.computadoresFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$computadoresPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.computadoresFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$computadoresPayload>
          }
          findMany: {
            args: Prisma.computadoresFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$computadoresPayload>[]
          }
          create: {
            args: Prisma.computadoresCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$computadoresPayload>
          }
          createMany: {
            args: Prisma.computadoresCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.computadoresDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$computadoresPayload>
          }
          update: {
            args: Prisma.computadoresUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$computadoresPayload>
          }
          deleteMany: {
            args: Prisma.computadoresDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.computadoresUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.computadoresUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$computadoresPayload>
          }
          aggregate: {
            args: Prisma.ComputadoresAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateComputadores>
          }
          groupBy: {
            args: Prisma.computadoresGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ComputadoresGroupByOutputType>[]
          }
          count: {
            args: Prisma.computadoresCountArgs<ExtArgs>,
            result: $Utils.Optional<ComputadoresCountAggregateOutputType> | number
          }
        }
      }
      televisores: {
        payload: Prisma.$televisoresPayload<ExtArgs>
        fields: Prisma.televisoresFieldRefs
        operations: {
          findUnique: {
            args: Prisma.televisoresFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$televisoresPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.televisoresFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$televisoresPayload>
          }
          findFirst: {
            args: Prisma.televisoresFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$televisoresPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.televisoresFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$televisoresPayload>
          }
          findMany: {
            args: Prisma.televisoresFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$televisoresPayload>[]
          }
          create: {
            args: Prisma.televisoresCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$televisoresPayload>
          }
          createMany: {
            args: Prisma.televisoresCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.televisoresDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$televisoresPayload>
          }
          update: {
            args: Prisma.televisoresUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$televisoresPayload>
          }
          deleteMany: {
            args: Prisma.televisoresDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.televisoresUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.televisoresUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$televisoresPayload>
          }
          aggregate: {
            args: Prisma.TelevisoresAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTelevisores>
          }
          groupBy: {
            args: Prisma.televisoresGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TelevisoresGroupByOutputType>[]
          }
          count: {
            args: Prisma.televisoresCountArgs<ExtArgs>,
            result: $Utils.Optional<TelevisoresCountAggregateOutputType> | number
          }
        }
      }
      consolas: {
        payload: Prisma.$consolasPayload<ExtArgs>
        fields: Prisma.consolasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.consolasFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$consolasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.consolasFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$consolasPayload>
          }
          findFirst: {
            args: Prisma.consolasFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$consolasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.consolasFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$consolasPayload>
          }
          findMany: {
            args: Prisma.consolasFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$consolasPayload>[]
          }
          create: {
            args: Prisma.consolasCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$consolasPayload>
          }
          createMany: {
            args: Prisma.consolasCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.consolasDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$consolasPayload>
          }
          update: {
            args: Prisma.consolasUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$consolasPayload>
          }
          deleteMany: {
            args: Prisma.consolasDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.consolasUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.consolasUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$consolasPayload>
          }
          aggregate: {
            args: Prisma.ConsolasAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateConsolas>
          }
          groupBy: {
            args: Prisma.consolasGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ConsolasGroupByOutputType>[]
          }
          count: {
            args: Prisma.consolasCountArgs<ExtArgs>,
            result: $Utils.Optional<ConsolasCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model sucursales
   */

  export type AggregateSucursales = {
    _count: SucursalesCountAggregateOutputType | null
    _avg: SucursalesAvgAggregateOutputType | null
    _sum: SucursalesSumAggregateOutputType | null
    _min: SucursalesMinAggregateOutputType | null
    _max: SucursalesMaxAggregateOutputType | null
  }

  export type SucursalesAvgAggregateOutputType = {
    id: number | null
  }

  export type SucursalesSumAggregateOutputType = {
    id: number | null
  }

  export type SucursalesMinAggregateOutputType = {
    id: number | null
    departamento: string | null
    nombre: string | null
  }

  export type SucursalesMaxAggregateOutputType = {
    id: number | null
    departamento: string | null
    nombre: string | null
  }

  export type SucursalesCountAggregateOutputType = {
    id: number
    departamento: number
    nombre: number
    _all: number
  }


  export type SucursalesAvgAggregateInputType = {
    id?: true
  }

  export type SucursalesSumAggregateInputType = {
    id?: true
  }

  export type SucursalesMinAggregateInputType = {
    id?: true
    departamento?: true
    nombre?: true
  }

  export type SucursalesMaxAggregateInputType = {
    id?: true
    departamento?: true
    nombre?: true
  }

  export type SucursalesCountAggregateInputType = {
    id?: true
    departamento?: true
    nombre?: true
    _all?: true
  }

  export type SucursalesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which sucursales to aggregate.
     */
    where?: sucursalesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sucursales to fetch.
     */
    orderBy?: sucursalesOrderByWithRelationInput | sucursalesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: sucursalesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sucursales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sucursales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned sucursales
    **/
    _count?: true | SucursalesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SucursalesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SucursalesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SucursalesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SucursalesMaxAggregateInputType
  }

  export type GetSucursalesAggregateType<T extends SucursalesAggregateArgs> = {
        [P in keyof T & keyof AggregateSucursales]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSucursales[P]>
      : GetScalarType<T[P], AggregateSucursales[P]>
  }




  export type sucursalesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: sucursalesWhereInput
    orderBy?: sucursalesOrderByWithAggregationInput | sucursalesOrderByWithAggregationInput[]
    by: SucursalesScalarFieldEnum[] | SucursalesScalarFieldEnum
    having?: sucursalesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SucursalesCountAggregateInputType | true
    _avg?: SucursalesAvgAggregateInputType
    _sum?: SucursalesSumAggregateInputType
    _min?: SucursalesMinAggregateInputType
    _max?: SucursalesMaxAggregateInputType
  }

  export type SucursalesGroupByOutputType = {
    id: number
    departamento: string
    nombre: string
    _count: SucursalesCountAggregateOutputType | null
    _avg: SucursalesAvgAggregateOutputType | null
    _sum: SucursalesSumAggregateOutputType | null
    _min: SucursalesMinAggregateOutputType | null
    _max: SucursalesMaxAggregateOutputType | null
  }

  type GetSucursalesGroupByPayload<T extends sucursalesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SucursalesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SucursalesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SucursalesGroupByOutputType[P]>
            : GetScalarType<T[P], SucursalesGroupByOutputType[P]>
        }
      >
    >


  export type sucursalesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    departamento?: boolean
    nombre?: boolean
  }, ExtArgs["result"]["sucursales"]>

  export type sucursalesSelectScalar = {
    id?: boolean
    departamento?: boolean
    nombre?: boolean
  }



  export type $sucursalesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "sucursales"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      departamento: string
      nombre: string
    }, ExtArgs["result"]["sucursales"]>
    composites: {}
  }


  type sucursalesGetPayload<S extends boolean | null | undefined | sucursalesDefaultArgs> = $Result.GetResult<Prisma.$sucursalesPayload, S>

  type sucursalesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<sucursalesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SucursalesCountAggregateInputType | true
    }

  export interface sucursalesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['sucursales'], meta: { name: 'sucursales' } }
    /**
     * Find zero or one Sucursales that matches the filter.
     * @param {sucursalesFindUniqueArgs} args - Arguments to find a Sucursales
     * @example
     * // Get one Sucursales
     * const sucursales = await prisma.sucursales.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends sucursalesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, sucursalesFindUniqueArgs<ExtArgs>>
    ): Prisma__sucursalesClient<$Result.GetResult<Prisma.$sucursalesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Sucursales that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {sucursalesFindUniqueOrThrowArgs} args - Arguments to find a Sucursales
     * @example
     * // Get one Sucursales
     * const sucursales = await prisma.sucursales.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends sucursalesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, sucursalesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__sucursalesClient<$Result.GetResult<Prisma.$sucursalesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Sucursales that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sucursalesFindFirstArgs} args - Arguments to find a Sucursales
     * @example
     * // Get one Sucursales
     * const sucursales = await prisma.sucursales.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends sucursalesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, sucursalesFindFirstArgs<ExtArgs>>
    ): Prisma__sucursalesClient<$Result.GetResult<Prisma.$sucursalesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Sucursales that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sucursalesFindFirstOrThrowArgs} args - Arguments to find a Sucursales
     * @example
     * // Get one Sucursales
     * const sucursales = await prisma.sucursales.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends sucursalesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, sucursalesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__sucursalesClient<$Result.GetResult<Prisma.$sucursalesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Sucursales that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sucursalesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sucursales
     * const sucursales = await prisma.sucursales.findMany()
     * 
     * // Get first 10 Sucursales
     * const sucursales = await prisma.sucursales.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sucursalesWithIdOnly = await prisma.sucursales.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends sucursalesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, sucursalesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$sucursalesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Sucursales.
     * @param {sucursalesCreateArgs} args - Arguments to create a Sucursales.
     * @example
     * // Create one Sucursales
     * const Sucursales = await prisma.sucursales.create({
     *   data: {
     *     // ... data to create a Sucursales
     *   }
     * })
     * 
    **/
    create<T extends sucursalesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, sucursalesCreateArgs<ExtArgs>>
    ): Prisma__sucursalesClient<$Result.GetResult<Prisma.$sucursalesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Sucursales.
     * @param {sucursalesCreateManyArgs} args - Arguments to create many Sucursales.
     * @example
     * // Create many Sucursales
     * const sucursales = await prisma.sucursales.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends sucursalesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, sucursalesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Sucursales.
     * @param {sucursalesDeleteArgs} args - Arguments to delete one Sucursales.
     * @example
     * // Delete one Sucursales
     * const Sucursales = await prisma.sucursales.delete({
     *   where: {
     *     // ... filter to delete one Sucursales
     *   }
     * })
     * 
    **/
    delete<T extends sucursalesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, sucursalesDeleteArgs<ExtArgs>>
    ): Prisma__sucursalesClient<$Result.GetResult<Prisma.$sucursalesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Sucursales.
     * @param {sucursalesUpdateArgs} args - Arguments to update one Sucursales.
     * @example
     * // Update one Sucursales
     * const sucursales = await prisma.sucursales.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends sucursalesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, sucursalesUpdateArgs<ExtArgs>>
    ): Prisma__sucursalesClient<$Result.GetResult<Prisma.$sucursalesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Sucursales.
     * @param {sucursalesDeleteManyArgs} args - Arguments to filter Sucursales to delete.
     * @example
     * // Delete a few Sucursales
     * const { count } = await prisma.sucursales.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends sucursalesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, sucursalesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sucursales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sucursalesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sucursales
     * const sucursales = await prisma.sucursales.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends sucursalesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, sucursalesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Sucursales.
     * @param {sucursalesUpsertArgs} args - Arguments to update or create a Sucursales.
     * @example
     * // Update or create a Sucursales
     * const sucursales = await prisma.sucursales.upsert({
     *   create: {
     *     // ... data to create a Sucursales
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sucursales we want to update
     *   }
     * })
    **/
    upsert<T extends sucursalesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, sucursalesUpsertArgs<ExtArgs>>
    ): Prisma__sucursalesClient<$Result.GetResult<Prisma.$sucursalesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Sucursales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sucursalesCountArgs} args - Arguments to filter Sucursales to count.
     * @example
     * // Count the number of Sucursales
     * const count = await prisma.sucursales.count({
     *   where: {
     *     // ... the filter for the Sucursales we want to count
     *   }
     * })
    **/
    count<T extends sucursalesCountArgs>(
      args?: Subset<T, sucursalesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SucursalesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sucursales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SucursalesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SucursalesAggregateArgs>(args: Subset<T, SucursalesAggregateArgs>): Prisma.PrismaPromise<GetSucursalesAggregateType<T>>

    /**
     * Group by Sucursales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sucursalesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends sucursalesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: sucursalesGroupByArgs['orderBy'] }
        : { orderBy?: sucursalesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, sucursalesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSucursalesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the sucursales model
   */
  readonly fields: sucursalesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for sucursales.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__sucursalesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the sucursales model
   */ 
  interface sucursalesFieldRefs {
    readonly id: FieldRef<"sucursales", 'Int'>
    readonly departamento: FieldRef<"sucursales", 'String'>
    readonly nombre: FieldRef<"sucursales", 'String'>
  }
    

  // Custom InputTypes
  /**
   * sucursales findUnique
   */
  export type sucursalesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sucursales
     */
    select?: sucursalesSelect<ExtArgs> | null
    /**
     * Filter, which sucursales to fetch.
     */
    where: sucursalesWhereUniqueInput
  }

  /**
   * sucursales findUniqueOrThrow
   */
  export type sucursalesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sucursales
     */
    select?: sucursalesSelect<ExtArgs> | null
    /**
     * Filter, which sucursales to fetch.
     */
    where: sucursalesWhereUniqueInput
  }

  /**
   * sucursales findFirst
   */
  export type sucursalesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sucursales
     */
    select?: sucursalesSelect<ExtArgs> | null
    /**
     * Filter, which sucursales to fetch.
     */
    where?: sucursalesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sucursales to fetch.
     */
    orderBy?: sucursalesOrderByWithRelationInput | sucursalesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sucursales.
     */
    cursor?: sucursalesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sucursales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sucursales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sucursales.
     */
    distinct?: SucursalesScalarFieldEnum | SucursalesScalarFieldEnum[]
  }

  /**
   * sucursales findFirstOrThrow
   */
  export type sucursalesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sucursales
     */
    select?: sucursalesSelect<ExtArgs> | null
    /**
     * Filter, which sucursales to fetch.
     */
    where?: sucursalesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sucursales to fetch.
     */
    orderBy?: sucursalesOrderByWithRelationInput | sucursalesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sucursales.
     */
    cursor?: sucursalesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sucursales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sucursales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sucursales.
     */
    distinct?: SucursalesScalarFieldEnum | SucursalesScalarFieldEnum[]
  }

  /**
   * sucursales findMany
   */
  export type sucursalesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sucursales
     */
    select?: sucursalesSelect<ExtArgs> | null
    /**
     * Filter, which sucursales to fetch.
     */
    where?: sucursalesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sucursales to fetch.
     */
    orderBy?: sucursalesOrderByWithRelationInput | sucursalesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing sucursales.
     */
    cursor?: sucursalesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sucursales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sucursales.
     */
    skip?: number
    distinct?: SucursalesScalarFieldEnum | SucursalesScalarFieldEnum[]
  }

  /**
   * sucursales create
   */
  export type sucursalesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sucursales
     */
    select?: sucursalesSelect<ExtArgs> | null
    /**
     * The data needed to create a sucursales.
     */
    data: XOR<sucursalesCreateInput, sucursalesUncheckedCreateInput>
  }

  /**
   * sucursales createMany
   */
  export type sucursalesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many sucursales.
     */
    data: sucursalesCreateManyInput | sucursalesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * sucursales update
   */
  export type sucursalesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sucursales
     */
    select?: sucursalesSelect<ExtArgs> | null
    /**
     * The data needed to update a sucursales.
     */
    data: XOR<sucursalesUpdateInput, sucursalesUncheckedUpdateInput>
    /**
     * Choose, which sucursales to update.
     */
    where: sucursalesWhereUniqueInput
  }

  /**
   * sucursales updateMany
   */
  export type sucursalesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update sucursales.
     */
    data: XOR<sucursalesUpdateManyMutationInput, sucursalesUncheckedUpdateManyInput>
    /**
     * Filter which sucursales to update
     */
    where?: sucursalesWhereInput
  }

  /**
   * sucursales upsert
   */
  export type sucursalesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sucursales
     */
    select?: sucursalesSelect<ExtArgs> | null
    /**
     * The filter to search for the sucursales to update in case it exists.
     */
    where: sucursalesWhereUniqueInput
    /**
     * In case the sucursales found by the `where` argument doesn't exist, create a new sucursales with this data.
     */
    create: XOR<sucursalesCreateInput, sucursalesUncheckedCreateInput>
    /**
     * In case the sucursales was found with the provided `where` argument, update it with this data.
     */
    update: XOR<sucursalesUpdateInput, sucursalesUncheckedUpdateInput>
  }

  /**
   * sucursales delete
   */
  export type sucursalesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sucursales
     */
    select?: sucursalesSelect<ExtArgs> | null
    /**
     * Filter which sucursales to delete.
     */
    where: sucursalesWhereUniqueInput
  }

  /**
   * sucursales deleteMany
   */
  export type sucursalesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which sucursales to delete
     */
    where?: sucursalesWhereInput
  }

  /**
   * sucursales without action
   */
  export type sucursalesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sucursales
     */
    select?: sucursalesSelect<ExtArgs> | null
  }


  /**
   * Model ciudades
   */

  export type AggregateCiudades = {
    _count: CiudadesCountAggregateOutputType | null
    _avg: CiudadesAvgAggregateOutputType | null
    _sum: CiudadesSumAggregateOutputType | null
    _min: CiudadesMinAggregateOutputType | null
    _max: CiudadesMaxAggregateOutputType | null
  }

  export type CiudadesAvgAggregateOutputType = {
    id: number | null
    codigoPostal: number | null
  }

  export type CiudadesSumAggregateOutputType = {
    id: number | null
    codigoPostal: number | null
  }

  export type CiudadesMinAggregateOutputType = {
    id: number | null
    pais: string | null
    ciudad: string | null
    codigoPostal: number | null
  }

  export type CiudadesMaxAggregateOutputType = {
    id: number | null
    pais: string | null
    ciudad: string | null
    codigoPostal: number | null
  }

  export type CiudadesCountAggregateOutputType = {
    id: number
    pais: number
    ciudad: number
    codigoPostal: number
    _all: number
  }


  export type CiudadesAvgAggregateInputType = {
    id?: true
    codigoPostal?: true
  }

  export type CiudadesSumAggregateInputType = {
    id?: true
    codigoPostal?: true
  }

  export type CiudadesMinAggregateInputType = {
    id?: true
    pais?: true
    ciudad?: true
    codigoPostal?: true
  }

  export type CiudadesMaxAggregateInputType = {
    id?: true
    pais?: true
    ciudad?: true
    codigoPostal?: true
  }

  export type CiudadesCountAggregateInputType = {
    id?: true
    pais?: true
    ciudad?: true
    codigoPostal?: true
    _all?: true
  }

  export type CiudadesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ciudades to aggregate.
     */
    where?: ciudadesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ciudades to fetch.
     */
    orderBy?: ciudadesOrderByWithRelationInput | ciudadesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ciudadesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ciudades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ciudades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ciudades
    **/
    _count?: true | CiudadesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CiudadesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CiudadesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CiudadesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CiudadesMaxAggregateInputType
  }

  export type GetCiudadesAggregateType<T extends CiudadesAggregateArgs> = {
        [P in keyof T & keyof AggregateCiudades]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCiudades[P]>
      : GetScalarType<T[P], AggregateCiudades[P]>
  }




  export type ciudadesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ciudadesWhereInput
    orderBy?: ciudadesOrderByWithAggregationInput | ciudadesOrderByWithAggregationInput[]
    by: CiudadesScalarFieldEnum[] | CiudadesScalarFieldEnum
    having?: ciudadesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CiudadesCountAggregateInputType | true
    _avg?: CiudadesAvgAggregateInputType
    _sum?: CiudadesSumAggregateInputType
    _min?: CiudadesMinAggregateInputType
    _max?: CiudadesMaxAggregateInputType
  }

  export type CiudadesGroupByOutputType = {
    id: number
    pais: string
    ciudad: string
    codigoPostal: number
    _count: CiudadesCountAggregateOutputType | null
    _avg: CiudadesAvgAggregateOutputType | null
    _sum: CiudadesSumAggregateOutputType | null
    _min: CiudadesMinAggregateOutputType | null
    _max: CiudadesMaxAggregateOutputType | null
  }

  type GetCiudadesGroupByPayload<T extends ciudadesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CiudadesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CiudadesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CiudadesGroupByOutputType[P]>
            : GetScalarType<T[P], CiudadesGroupByOutputType[P]>
        }
      >
    >


  export type ciudadesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pais?: boolean
    ciudad?: boolean
    codigoPostal?: boolean
  }, ExtArgs["result"]["ciudades"]>

  export type ciudadesSelectScalar = {
    id?: boolean
    pais?: boolean
    ciudad?: boolean
    codigoPostal?: boolean
  }



  export type $ciudadesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ciudades"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      pais: string
      ciudad: string
      codigoPostal: number
    }, ExtArgs["result"]["ciudades"]>
    composites: {}
  }


  type ciudadesGetPayload<S extends boolean | null | undefined | ciudadesDefaultArgs> = $Result.GetResult<Prisma.$ciudadesPayload, S>

  type ciudadesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ciudadesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CiudadesCountAggregateInputType | true
    }

  export interface ciudadesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ciudades'], meta: { name: 'ciudades' } }
    /**
     * Find zero or one Ciudades that matches the filter.
     * @param {ciudadesFindUniqueArgs} args - Arguments to find a Ciudades
     * @example
     * // Get one Ciudades
     * const ciudades = await prisma.ciudades.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ciudadesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ciudadesFindUniqueArgs<ExtArgs>>
    ): Prisma__ciudadesClient<$Result.GetResult<Prisma.$ciudadesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Ciudades that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ciudadesFindUniqueOrThrowArgs} args - Arguments to find a Ciudades
     * @example
     * // Get one Ciudades
     * const ciudades = await prisma.ciudades.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ciudadesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ciudadesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ciudadesClient<$Result.GetResult<Prisma.$ciudadesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Ciudades that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ciudadesFindFirstArgs} args - Arguments to find a Ciudades
     * @example
     * // Get one Ciudades
     * const ciudades = await prisma.ciudades.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ciudadesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ciudadesFindFirstArgs<ExtArgs>>
    ): Prisma__ciudadesClient<$Result.GetResult<Prisma.$ciudadesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Ciudades that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ciudadesFindFirstOrThrowArgs} args - Arguments to find a Ciudades
     * @example
     * // Get one Ciudades
     * const ciudades = await prisma.ciudades.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ciudadesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ciudadesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ciudadesClient<$Result.GetResult<Prisma.$ciudadesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Ciudades that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ciudadesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ciudades
     * const ciudades = await prisma.ciudades.findMany()
     * 
     * // Get first 10 Ciudades
     * const ciudades = await prisma.ciudades.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ciudadesWithIdOnly = await prisma.ciudades.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ciudadesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ciudadesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ciudadesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Ciudades.
     * @param {ciudadesCreateArgs} args - Arguments to create a Ciudades.
     * @example
     * // Create one Ciudades
     * const Ciudades = await prisma.ciudades.create({
     *   data: {
     *     // ... data to create a Ciudades
     *   }
     * })
     * 
    **/
    create<T extends ciudadesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ciudadesCreateArgs<ExtArgs>>
    ): Prisma__ciudadesClient<$Result.GetResult<Prisma.$ciudadesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Ciudades.
     * @param {ciudadesCreateManyArgs} args - Arguments to create many Ciudades.
     * @example
     * // Create many Ciudades
     * const ciudades = await prisma.ciudades.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ciudadesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ciudadesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Ciudades.
     * @param {ciudadesDeleteArgs} args - Arguments to delete one Ciudades.
     * @example
     * // Delete one Ciudades
     * const Ciudades = await prisma.ciudades.delete({
     *   where: {
     *     // ... filter to delete one Ciudades
     *   }
     * })
     * 
    **/
    delete<T extends ciudadesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ciudadesDeleteArgs<ExtArgs>>
    ): Prisma__ciudadesClient<$Result.GetResult<Prisma.$ciudadesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Ciudades.
     * @param {ciudadesUpdateArgs} args - Arguments to update one Ciudades.
     * @example
     * // Update one Ciudades
     * const ciudades = await prisma.ciudades.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ciudadesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ciudadesUpdateArgs<ExtArgs>>
    ): Prisma__ciudadesClient<$Result.GetResult<Prisma.$ciudadesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Ciudades.
     * @param {ciudadesDeleteManyArgs} args - Arguments to filter Ciudades to delete.
     * @example
     * // Delete a few Ciudades
     * const { count } = await prisma.ciudades.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ciudadesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ciudadesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ciudades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ciudadesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ciudades
     * const ciudades = await prisma.ciudades.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ciudadesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ciudadesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ciudades.
     * @param {ciudadesUpsertArgs} args - Arguments to update or create a Ciudades.
     * @example
     * // Update or create a Ciudades
     * const ciudades = await prisma.ciudades.upsert({
     *   create: {
     *     // ... data to create a Ciudades
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ciudades we want to update
     *   }
     * })
    **/
    upsert<T extends ciudadesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ciudadesUpsertArgs<ExtArgs>>
    ): Prisma__ciudadesClient<$Result.GetResult<Prisma.$ciudadesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Ciudades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ciudadesCountArgs} args - Arguments to filter Ciudades to count.
     * @example
     * // Count the number of Ciudades
     * const count = await prisma.ciudades.count({
     *   where: {
     *     // ... the filter for the Ciudades we want to count
     *   }
     * })
    **/
    count<T extends ciudadesCountArgs>(
      args?: Subset<T, ciudadesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CiudadesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ciudades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CiudadesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CiudadesAggregateArgs>(args: Subset<T, CiudadesAggregateArgs>): Prisma.PrismaPromise<GetCiudadesAggregateType<T>>

    /**
     * Group by Ciudades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ciudadesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ciudadesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ciudadesGroupByArgs['orderBy'] }
        : { orderBy?: ciudadesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ciudadesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCiudadesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ciudades model
   */
  readonly fields: ciudadesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ciudades.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ciudadesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ciudades model
   */ 
  interface ciudadesFieldRefs {
    readonly id: FieldRef<"ciudades", 'Int'>
    readonly pais: FieldRef<"ciudades", 'String'>
    readonly ciudad: FieldRef<"ciudades", 'String'>
    readonly codigoPostal: FieldRef<"ciudades", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ciudades findUnique
   */
  export type ciudadesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ciudades
     */
    select?: ciudadesSelect<ExtArgs> | null
    /**
     * Filter, which ciudades to fetch.
     */
    where: ciudadesWhereUniqueInput
  }

  /**
   * ciudades findUniqueOrThrow
   */
  export type ciudadesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ciudades
     */
    select?: ciudadesSelect<ExtArgs> | null
    /**
     * Filter, which ciudades to fetch.
     */
    where: ciudadesWhereUniqueInput
  }

  /**
   * ciudades findFirst
   */
  export type ciudadesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ciudades
     */
    select?: ciudadesSelect<ExtArgs> | null
    /**
     * Filter, which ciudades to fetch.
     */
    where?: ciudadesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ciudades to fetch.
     */
    orderBy?: ciudadesOrderByWithRelationInput | ciudadesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ciudades.
     */
    cursor?: ciudadesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ciudades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ciudades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ciudades.
     */
    distinct?: CiudadesScalarFieldEnum | CiudadesScalarFieldEnum[]
  }

  /**
   * ciudades findFirstOrThrow
   */
  export type ciudadesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ciudades
     */
    select?: ciudadesSelect<ExtArgs> | null
    /**
     * Filter, which ciudades to fetch.
     */
    where?: ciudadesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ciudades to fetch.
     */
    orderBy?: ciudadesOrderByWithRelationInput | ciudadesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ciudades.
     */
    cursor?: ciudadesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ciudades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ciudades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ciudades.
     */
    distinct?: CiudadesScalarFieldEnum | CiudadesScalarFieldEnum[]
  }

  /**
   * ciudades findMany
   */
  export type ciudadesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ciudades
     */
    select?: ciudadesSelect<ExtArgs> | null
    /**
     * Filter, which ciudades to fetch.
     */
    where?: ciudadesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ciudades to fetch.
     */
    orderBy?: ciudadesOrderByWithRelationInput | ciudadesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ciudades.
     */
    cursor?: ciudadesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ciudades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ciudades.
     */
    skip?: number
    distinct?: CiudadesScalarFieldEnum | CiudadesScalarFieldEnum[]
  }

  /**
   * ciudades create
   */
  export type ciudadesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ciudades
     */
    select?: ciudadesSelect<ExtArgs> | null
    /**
     * The data needed to create a ciudades.
     */
    data: XOR<ciudadesCreateInput, ciudadesUncheckedCreateInput>
  }

  /**
   * ciudades createMany
   */
  export type ciudadesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ciudades.
     */
    data: ciudadesCreateManyInput | ciudadesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ciudades update
   */
  export type ciudadesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ciudades
     */
    select?: ciudadesSelect<ExtArgs> | null
    /**
     * The data needed to update a ciudades.
     */
    data: XOR<ciudadesUpdateInput, ciudadesUncheckedUpdateInput>
    /**
     * Choose, which ciudades to update.
     */
    where: ciudadesWhereUniqueInput
  }

  /**
   * ciudades updateMany
   */
  export type ciudadesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ciudades.
     */
    data: XOR<ciudadesUpdateManyMutationInput, ciudadesUncheckedUpdateManyInput>
    /**
     * Filter which ciudades to update
     */
    where?: ciudadesWhereInput
  }

  /**
   * ciudades upsert
   */
  export type ciudadesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ciudades
     */
    select?: ciudadesSelect<ExtArgs> | null
    /**
     * The filter to search for the ciudades to update in case it exists.
     */
    where: ciudadesWhereUniqueInput
    /**
     * In case the ciudades found by the `where` argument doesn't exist, create a new ciudades with this data.
     */
    create: XOR<ciudadesCreateInput, ciudadesUncheckedCreateInput>
    /**
     * In case the ciudades was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ciudadesUpdateInput, ciudadesUncheckedUpdateInput>
  }

  /**
   * ciudades delete
   */
  export type ciudadesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ciudades
     */
    select?: ciudadesSelect<ExtArgs> | null
    /**
     * Filter which ciudades to delete.
     */
    where: ciudadesWhereUniqueInput
  }

  /**
   * ciudades deleteMany
   */
  export type ciudadesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ciudades to delete
     */
    where?: ciudadesWhereInput
  }

  /**
   * ciudades without action
   */
  export type ciudadesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ciudades
     */
    select?: ciudadesSelect<ExtArgs> | null
  }


  /**
   * Model metodoPago
   */

  export type AggregateMetodoPago = {
    _count: MetodoPagoCountAggregateOutputType | null
    _avg: MetodoPagoAvgAggregateOutputType | null
    _sum: MetodoPagoSumAggregateOutputType | null
    _min: MetodoPagoMinAggregateOutputType | null
    _max: MetodoPagoMaxAggregateOutputType | null
  }

  export type MetodoPagoAvgAggregateOutputType = {
    id: number | null
  }

  export type MetodoPagoSumAggregateOutputType = {
    id: number | null
  }

  export type MetodoPagoMinAggregateOutputType = {
    id: number | null
    nombre: string | null
  }

  export type MetodoPagoMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
  }

  export type MetodoPagoCountAggregateOutputType = {
    id: number
    nombre: number
    _all: number
  }


  export type MetodoPagoAvgAggregateInputType = {
    id?: true
  }

  export type MetodoPagoSumAggregateInputType = {
    id?: true
  }

  export type MetodoPagoMinAggregateInputType = {
    id?: true
    nombre?: true
  }

  export type MetodoPagoMaxAggregateInputType = {
    id?: true
    nombre?: true
  }

  export type MetodoPagoCountAggregateInputType = {
    id?: true
    nombre?: true
    _all?: true
  }

  export type MetodoPagoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which metodoPago to aggregate.
     */
    where?: metodoPagoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of metodoPagos to fetch.
     */
    orderBy?: metodoPagoOrderByWithRelationInput | metodoPagoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: metodoPagoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` metodoPagos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` metodoPagos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned metodoPagos
    **/
    _count?: true | MetodoPagoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MetodoPagoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MetodoPagoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MetodoPagoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MetodoPagoMaxAggregateInputType
  }

  export type GetMetodoPagoAggregateType<T extends MetodoPagoAggregateArgs> = {
        [P in keyof T & keyof AggregateMetodoPago]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMetodoPago[P]>
      : GetScalarType<T[P], AggregateMetodoPago[P]>
  }




  export type metodoPagoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: metodoPagoWhereInput
    orderBy?: metodoPagoOrderByWithAggregationInput | metodoPagoOrderByWithAggregationInput[]
    by: MetodoPagoScalarFieldEnum[] | MetodoPagoScalarFieldEnum
    having?: metodoPagoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MetodoPagoCountAggregateInputType | true
    _avg?: MetodoPagoAvgAggregateInputType
    _sum?: MetodoPagoSumAggregateInputType
    _min?: MetodoPagoMinAggregateInputType
    _max?: MetodoPagoMaxAggregateInputType
  }

  export type MetodoPagoGroupByOutputType = {
    id: number
    nombre: string
    _count: MetodoPagoCountAggregateOutputType | null
    _avg: MetodoPagoAvgAggregateOutputType | null
    _sum: MetodoPagoSumAggregateOutputType | null
    _min: MetodoPagoMinAggregateOutputType | null
    _max: MetodoPagoMaxAggregateOutputType | null
  }

  type GetMetodoPagoGroupByPayload<T extends metodoPagoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MetodoPagoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MetodoPagoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MetodoPagoGroupByOutputType[P]>
            : GetScalarType<T[P], MetodoPagoGroupByOutputType[P]>
        }
      >
    >


  export type metodoPagoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
  }, ExtArgs["result"]["metodoPago"]>

  export type metodoPagoSelectScalar = {
    id?: boolean
    nombre?: boolean
  }



  export type $metodoPagoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "metodoPago"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
    }, ExtArgs["result"]["metodoPago"]>
    composites: {}
  }


  type metodoPagoGetPayload<S extends boolean | null | undefined | metodoPagoDefaultArgs> = $Result.GetResult<Prisma.$metodoPagoPayload, S>

  type metodoPagoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<metodoPagoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MetodoPagoCountAggregateInputType | true
    }

  export interface metodoPagoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['metodoPago'], meta: { name: 'metodoPago' } }
    /**
     * Find zero or one MetodoPago that matches the filter.
     * @param {metodoPagoFindUniqueArgs} args - Arguments to find a MetodoPago
     * @example
     * // Get one MetodoPago
     * const metodoPago = await prisma.metodoPago.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends metodoPagoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, metodoPagoFindUniqueArgs<ExtArgs>>
    ): Prisma__metodoPagoClient<$Result.GetResult<Prisma.$metodoPagoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one MetodoPago that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {metodoPagoFindUniqueOrThrowArgs} args - Arguments to find a MetodoPago
     * @example
     * // Get one MetodoPago
     * const metodoPago = await prisma.metodoPago.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends metodoPagoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, metodoPagoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__metodoPagoClient<$Result.GetResult<Prisma.$metodoPagoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first MetodoPago that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {metodoPagoFindFirstArgs} args - Arguments to find a MetodoPago
     * @example
     * // Get one MetodoPago
     * const metodoPago = await prisma.metodoPago.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends metodoPagoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, metodoPagoFindFirstArgs<ExtArgs>>
    ): Prisma__metodoPagoClient<$Result.GetResult<Prisma.$metodoPagoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first MetodoPago that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {metodoPagoFindFirstOrThrowArgs} args - Arguments to find a MetodoPago
     * @example
     * // Get one MetodoPago
     * const metodoPago = await prisma.metodoPago.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends metodoPagoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, metodoPagoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__metodoPagoClient<$Result.GetResult<Prisma.$metodoPagoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more MetodoPagos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {metodoPagoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MetodoPagos
     * const metodoPagos = await prisma.metodoPago.findMany()
     * 
     * // Get first 10 MetodoPagos
     * const metodoPagos = await prisma.metodoPago.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const metodoPagoWithIdOnly = await prisma.metodoPago.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends metodoPagoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, metodoPagoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$metodoPagoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a MetodoPago.
     * @param {metodoPagoCreateArgs} args - Arguments to create a MetodoPago.
     * @example
     * // Create one MetodoPago
     * const MetodoPago = await prisma.metodoPago.create({
     *   data: {
     *     // ... data to create a MetodoPago
     *   }
     * })
     * 
    **/
    create<T extends metodoPagoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, metodoPagoCreateArgs<ExtArgs>>
    ): Prisma__metodoPagoClient<$Result.GetResult<Prisma.$metodoPagoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many MetodoPagos.
     * @param {metodoPagoCreateManyArgs} args - Arguments to create many MetodoPagos.
     * @example
     * // Create many MetodoPagos
     * const metodoPago = await prisma.metodoPago.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends metodoPagoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, metodoPagoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MetodoPago.
     * @param {metodoPagoDeleteArgs} args - Arguments to delete one MetodoPago.
     * @example
     * // Delete one MetodoPago
     * const MetodoPago = await prisma.metodoPago.delete({
     *   where: {
     *     // ... filter to delete one MetodoPago
     *   }
     * })
     * 
    **/
    delete<T extends metodoPagoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, metodoPagoDeleteArgs<ExtArgs>>
    ): Prisma__metodoPagoClient<$Result.GetResult<Prisma.$metodoPagoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one MetodoPago.
     * @param {metodoPagoUpdateArgs} args - Arguments to update one MetodoPago.
     * @example
     * // Update one MetodoPago
     * const metodoPago = await prisma.metodoPago.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends metodoPagoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, metodoPagoUpdateArgs<ExtArgs>>
    ): Prisma__metodoPagoClient<$Result.GetResult<Prisma.$metodoPagoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more MetodoPagos.
     * @param {metodoPagoDeleteManyArgs} args - Arguments to filter MetodoPagos to delete.
     * @example
     * // Delete a few MetodoPagos
     * const { count } = await prisma.metodoPago.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends metodoPagoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, metodoPagoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MetodoPagos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {metodoPagoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MetodoPagos
     * const metodoPago = await prisma.metodoPago.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends metodoPagoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, metodoPagoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MetodoPago.
     * @param {metodoPagoUpsertArgs} args - Arguments to update or create a MetodoPago.
     * @example
     * // Update or create a MetodoPago
     * const metodoPago = await prisma.metodoPago.upsert({
     *   create: {
     *     // ... data to create a MetodoPago
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MetodoPago we want to update
     *   }
     * })
    **/
    upsert<T extends metodoPagoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, metodoPagoUpsertArgs<ExtArgs>>
    ): Prisma__metodoPagoClient<$Result.GetResult<Prisma.$metodoPagoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of MetodoPagos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {metodoPagoCountArgs} args - Arguments to filter MetodoPagos to count.
     * @example
     * // Count the number of MetodoPagos
     * const count = await prisma.metodoPago.count({
     *   where: {
     *     // ... the filter for the MetodoPagos we want to count
     *   }
     * })
    **/
    count<T extends metodoPagoCountArgs>(
      args?: Subset<T, metodoPagoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MetodoPagoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MetodoPago.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetodoPagoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MetodoPagoAggregateArgs>(args: Subset<T, MetodoPagoAggregateArgs>): Prisma.PrismaPromise<GetMetodoPagoAggregateType<T>>

    /**
     * Group by MetodoPago.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {metodoPagoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends metodoPagoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: metodoPagoGroupByArgs['orderBy'] }
        : { orderBy?: metodoPagoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, metodoPagoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMetodoPagoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the metodoPago model
   */
  readonly fields: metodoPagoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for metodoPago.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__metodoPagoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the metodoPago model
   */ 
  interface metodoPagoFieldRefs {
    readonly id: FieldRef<"metodoPago", 'Int'>
    readonly nombre: FieldRef<"metodoPago", 'String'>
  }
    

  // Custom InputTypes
  /**
   * metodoPago findUnique
   */
  export type metodoPagoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the metodoPago
     */
    select?: metodoPagoSelect<ExtArgs> | null
    /**
     * Filter, which metodoPago to fetch.
     */
    where: metodoPagoWhereUniqueInput
  }

  /**
   * metodoPago findUniqueOrThrow
   */
  export type metodoPagoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the metodoPago
     */
    select?: metodoPagoSelect<ExtArgs> | null
    /**
     * Filter, which metodoPago to fetch.
     */
    where: metodoPagoWhereUniqueInput
  }

  /**
   * metodoPago findFirst
   */
  export type metodoPagoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the metodoPago
     */
    select?: metodoPagoSelect<ExtArgs> | null
    /**
     * Filter, which metodoPago to fetch.
     */
    where?: metodoPagoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of metodoPagos to fetch.
     */
    orderBy?: metodoPagoOrderByWithRelationInput | metodoPagoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for metodoPagos.
     */
    cursor?: metodoPagoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` metodoPagos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` metodoPagos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of metodoPagos.
     */
    distinct?: MetodoPagoScalarFieldEnum | MetodoPagoScalarFieldEnum[]
  }

  /**
   * metodoPago findFirstOrThrow
   */
  export type metodoPagoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the metodoPago
     */
    select?: metodoPagoSelect<ExtArgs> | null
    /**
     * Filter, which metodoPago to fetch.
     */
    where?: metodoPagoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of metodoPagos to fetch.
     */
    orderBy?: metodoPagoOrderByWithRelationInput | metodoPagoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for metodoPagos.
     */
    cursor?: metodoPagoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` metodoPagos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` metodoPagos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of metodoPagos.
     */
    distinct?: MetodoPagoScalarFieldEnum | MetodoPagoScalarFieldEnum[]
  }

  /**
   * metodoPago findMany
   */
  export type metodoPagoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the metodoPago
     */
    select?: metodoPagoSelect<ExtArgs> | null
    /**
     * Filter, which metodoPagos to fetch.
     */
    where?: metodoPagoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of metodoPagos to fetch.
     */
    orderBy?: metodoPagoOrderByWithRelationInput | metodoPagoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing metodoPagos.
     */
    cursor?: metodoPagoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` metodoPagos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` metodoPagos.
     */
    skip?: number
    distinct?: MetodoPagoScalarFieldEnum | MetodoPagoScalarFieldEnum[]
  }

  /**
   * metodoPago create
   */
  export type metodoPagoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the metodoPago
     */
    select?: metodoPagoSelect<ExtArgs> | null
    /**
     * The data needed to create a metodoPago.
     */
    data: XOR<metodoPagoCreateInput, metodoPagoUncheckedCreateInput>
  }

  /**
   * metodoPago createMany
   */
  export type metodoPagoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many metodoPagos.
     */
    data: metodoPagoCreateManyInput | metodoPagoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * metodoPago update
   */
  export type metodoPagoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the metodoPago
     */
    select?: metodoPagoSelect<ExtArgs> | null
    /**
     * The data needed to update a metodoPago.
     */
    data: XOR<metodoPagoUpdateInput, metodoPagoUncheckedUpdateInput>
    /**
     * Choose, which metodoPago to update.
     */
    where: metodoPagoWhereUniqueInput
  }

  /**
   * metodoPago updateMany
   */
  export type metodoPagoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update metodoPagos.
     */
    data: XOR<metodoPagoUpdateManyMutationInput, metodoPagoUncheckedUpdateManyInput>
    /**
     * Filter which metodoPagos to update
     */
    where?: metodoPagoWhereInput
  }

  /**
   * metodoPago upsert
   */
  export type metodoPagoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the metodoPago
     */
    select?: metodoPagoSelect<ExtArgs> | null
    /**
     * The filter to search for the metodoPago to update in case it exists.
     */
    where: metodoPagoWhereUniqueInput
    /**
     * In case the metodoPago found by the `where` argument doesn't exist, create a new metodoPago with this data.
     */
    create: XOR<metodoPagoCreateInput, metodoPagoUncheckedCreateInput>
    /**
     * In case the metodoPago was found with the provided `where` argument, update it with this data.
     */
    update: XOR<metodoPagoUpdateInput, metodoPagoUncheckedUpdateInput>
  }

  /**
   * metodoPago delete
   */
  export type metodoPagoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the metodoPago
     */
    select?: metodoPagoSelect<ExtArgs> | null
    /**
     * Filter which metodoPago to delete.
     */
    where: metodoPagoWhereUniqueInput
  }

  /**
   * metodoPago deleteMany
   */
  export type metodoPagoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which metodoPagos to delete
     */
    where?: metodoPagoWhereInput
  }

  /**
   * metodoPago without action
   */
  export type metodoPagoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the metodoPago
     */
    select?: metodoPagoSelect<ExtArgs> | null
  }


  /**
   * Model celulares
   */

  export type AggregateCelulares = {
    _count: CelularesCountAggregateOutputType | null
    _avg: CelularesAvgAggregateOutputType | null
    _sum: CelularesSumAggregateOutputType | null
    _min: CelularesMinAggregateOutputType | null
    _max: CelularesMaxAggregateOutputType | null
  }

  export type CelularesAvgAggregateOutputType = {
    id: number | null
    precio: number | null
  }

  export type CelularesSumAggregateOutputType = {
    id: number | null
    precio: number | null
  }

  export type CelularesMinAggregateOutputType = {
    id: number | null
    marca: string | null
    modelo: string | null
    color: string | null
    precio: number | null
    sistemaOperativo: string | null
    pantalla: string | null
    RAM: string | null
    almacenamiento: string | null
  }

  export type CelularesMaxAggregateOutputType = {
    id: number | null
    marca: string | null
    modelo: string | null
    color: string | null
    precio: number | null
    sistemaOperativo: string | null
    pantalla: string | null
    RAM: string | null
    almacenamiento: string | null
  }

  export type CelularesCountAggregateOutputType = {
    id: number
    marca: number
    modelo: number
    color: number
    precio: number
    sistemaOperativo: number
    pantalla: number
    RAM: number
    almacenamiento: number
    _all: number
  }


  export type CelularesAvgAggregateInputType = {
    id?: true
    precio?: true
  }

  export type CelularesSumAggregateInputType = {
    id?: true
    precio?: true
  }

  export type CelularesMinAggregateInputType = {
    id?: true
    marca?: true
    modelo?: true
    color?: true
    precio?: true
    sistemaOperativo?: true
    pantalla?: true
    RAM?: true
    almacenamiento?: true
  }

  export type CelularesMaxAggregateInputType = {
    id?: true
    marca?: true
    modelo?: true
    color?: true
    precio?: true
    sistemaOperativo?: true
    pantalla?: true
    RAM?: true
    almacenamiento?: true
  }

  export type CelularesCountAggregateInputType = {
    id?: true
    marca?: true
    modelo?: true
    color?: true
    precio?: true
    sistemaOperativo?: true
    pantalla?: true
    RAM?: true
    almacenamiento?: true
    _all?: true
  }

  export type CelularesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which celulares to aggregate.
     */
    where?: celularesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of celulares to fetch.
     */
    orderBy?: celularesOrderByWithRelationInput | celularesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: celularesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` celulares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` celulares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned celulares
    **/
    _count?: true | CelularesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CelularesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CelularesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CelularesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CelularesMaxAggregateInputType
  }

  export type GetCelularesAggregateType<T extends CelularesAggregateArgs> = {
        [P in keyof T & keyof AggregateCelulares]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCelulares[P]>
      : GetScalarType<T[P], AggregateCelulares[P]>
  }




  export type celularesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: celularesWhereInput
    orderBy?: celularesOrderByWithAggregationInput | celularesOrderByWithAggregationInput[]
    by: CelularesScalarFieldEnum[] | CelularesScalarFieldEnum
    having?: celularesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CelularesCountAggregateInputType | true
    _avg?: CelularesAvgAggregateInputType
    _sum?: CelularesSumAggregateInputType
    _min?: CelularesMinAggregateInputType
    _max?: CelularesMaxAggregateInputType
  }

  export type CelularesGroupByOutputType = {
    id: number
    marca: string
    modelo: string
    color: string
    precio: number
    sistemaOperativo: string
    pantalla: string
    RAM: string
    almacenamiento: string
    _count: CelularesCountAggregateOutputType | null
    _avg: CelularesAvgAggregateOutputType | null
    _sum: CelularesSumAggregateOutputType | null
    _min: CelularesMinAggregateOutputType | null
    _max: CelularesMaxAggregateOutputType | null
  }

  type GetCelularesGroupByPayload<T extends celularesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CelularesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CelularesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CelularesGroupByOutputType[P]>
            : GetScalarType<T[P], CelularesGroupByOutputType[P]>
        }
      >
    >


  export type celularesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    marca?: boolean
    modelo?: boolean
    color?: boolean
    precio?: boolean
    sistemaOperativo?: boolean
    pantalla?: boolean
    RAM?: boolean
    almacenamiento?: boolean
  }, ExtArgs["result"]["celulares"]>

  export type celularesSelectScalar = {
    id?: boolean
    marca?: boolean
    modelo?: boolean
    color?: boolean
    precio?: boolean
    sistemaOperativo?: boolean
    pantalla?: boolean
    RAM?: boolean
    almacenamiento?: boolean
  }



  export type $celularesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "celulares"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      marca: string
      modelo: string
      color: string
      precio: number
      sistemaOperativo: string
      pantalla: string
      RAM: string
      almacenamiento: string
    }, ExtArgs["result"]["celulares"]>
    composites: {}
  }


  type celularesGetPayload<S extends boolean | null | undefined | celularesDefaultArgs> = $Result.GetResult<Prisma.$celularesPayload, S>

  type celularesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<celularesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CelularesCountAggregateInputType | true
    }

  export interface celularesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['celulares'], meta: { name: 'celulares' } }
    /**
     * Find zero or one Celulares that matches the filter.
     * @param {celularesFindUniqueArgs} args - Arguments to find a Celulares
     * @example
     * // Get one Celulares
     * const celulares = await prisma.celulares.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends celularesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, celularesFindUniqueArgs<ExtArgs>>
    ): Prisma__celularesClient<$Result.GetResult<Prisma.$celularesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Celulares that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {celularesFindUniqueOrThrowArgs} args - Arguments to find a Celulares
     * @example
     * // Get one Celulares
     * const celulares = await prisma.celulares.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends celularesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, celularesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__celularesClient<$Result.GetResult<Prisma.$celularesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Celulares that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {celularesFindFirstArgs} args - Arguments to find a Celulares
     * @example
     * // Get one Celulares
     * const celulares = await prisma.celulares.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends celularesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, celularesFindFirstArgs<ExtArgs>>
    ): Prisma__celularesClient<$Result.GetResult<Prisma.$celularesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Celulares that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {celularesFindFirstOrThrowArgs} args - Arguments to find a Celulares
     * @example
     * // Get one Celulares
     * const celulares = await prisma.celulares.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends celularesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, celularesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__celularesClient<$Result.GetResult<Prisma.$celularesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Celulares that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {celularesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Celulares
     * const celulares = await prisma.celulares.findMany()
     * 
     * // Get first 10 Celulares
     * const celulares = await prisma.celulares.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const celularesWithIdOnly = await prisma.celulares.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends celularesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, celularesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$celularesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Celulares.
     * @param {celularesCreateArgs} args - Arguments to create a Celulares.
     * @example
     * // Create one Celulares
     * const Celulares = await prisma.celulares.create({
     *   data: {
     *     // ... data to create a Celulares
     *   }
     * })
     * 
    **/
    create<T extends celularesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, celularesCreateArgs<ExtArgs>>
    ): Prisma__celularesClient<$Result.GetResult<Prisma.$celularesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Celulares.
     * @param {celularesCreateManyArgs} args - Arguments to create many Celulares.
     * @example
     * // Create many Celulares
     * const celulares = await prisma.celulares.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends celularesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, celularesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Celulares.
     * @param {celularesDeleteArgs} args - Arguments to delete one Celulares.
     * @example
     * // Delete one Celulares
     * const Celulares = await prisma.celulares.delete({
     *   where: {
     *     // ... filter to delete one Celulares
     *   }
     * })
     * 
    **/
    delete<T extends celularesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, celularesDeleteArgs<ExtArgs>>
    ): Prisma__celularesClient<$Result.GetResult<Prisma.$celularesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Celulares.
     * @param {celularesUpdateArgs} args - Arguments to update one Celulares.
     * @example
     * // Update one Celulares
     * const celulares = await prisma.celulares.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends celularesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, celularesUpdateArgs<ExtArgs>>
    ): Prisma__celularesClient<$Result.GetResult<Prisma.$celularesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Celulares.
     * @param {celularesDeleteManyArgs} args - Arguments to filter Celulares to delete.
     * @example
     * // Delete a few Celulares
     * const { count } = await prisma.celulares.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends celularesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, celularesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Celulares.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {celularesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Celulares
     * const celulares = await prisma.celulares.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends celularesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, celularesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Celulares.
     * @param {celularesUpsertArgs} args - Arguments to update or create a Celulares.
     * @example
     * // Update or create a Celulares
     * const celulares = await prisma.celulares.upsert({
     *   create: {
     *     // ... data to create a Celulares
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Celulares we want to update
     *   }
     * })
    **/
    upsert<T extends celularesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, celularesUpsertArgs<ExtArgs>>
    ): Prisma__celularesClient<$Result.GetResult<Prisma.$celularesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Celulares.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {celularesCountArgs} args - Arguments to filter Celulares to count.
     * @example
     * // Count the number of Celulares
     * const count = await prisma.celulares.count({
     *   where: {
     *     // ... the filter for the Celulares we want to count
     *   }
     * })
    **/
    count<T extends celularesCountArgs>(
      args?: Subset<T, celularesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CelularesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Celulares.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CelularesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CelularesAggregateArgs>(args: Subset<T, CelularesAggregateArgs>): Prisma.PrismaPromise<GetCelularesAggregateType<T>>

    /**
     * Group by Celulares.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {celularesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends celularesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: celularesGroupByArgs['orderBy'] }
        : { orderBy?: celularesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, celularesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCelularesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the celulares model
   */
  readonly fields: celularesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for celulares.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__celularesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the celulares model
   */ 
  interface celularesFieldRefs {
    readonly id: FieldRef<"celulares", 'Int'>
    readonly marca: FieldRef<"celulares", 'String'>
    readonly modelo: FieldRef<"celulares", 'String'>
    readonly color: FieldRef<"celulares", 'String'>
    readonly precio: FieldRef<"celulares", 'Float'>
    readonly sistemaOperativo: FieldRef<"celulares", 'String'>
    readonly pantalla: FieldRef<"celulares", 'String'>
    readonly RAM: FieldRef<"celulares", 'String'>
    readonly almacenamiento: FieldRef<"celulares", 'String'>
  }
    

  // Custom InputTypes
  /**
   * celulares findUnique
   */
  export type celularesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the celulares
     */
    select?: celularesSelect<ExtArgs> | null
    /**
     * Filter, which celulares to fetch.
     */
    where: celularesWhereUniqueInput
  }

  /**
   * celulares findUniqueOrThrow
   */
  export type celularesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the celulares
     */
    select?: celularesSelect<ExtArgs> | null
    /**
     * Filter, which celulares to fetch.
     */
    where: celularesWhereUniqueInput
  }

  /**
   * celulares findFirst
   */
  export type celularesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the celulares
     */
    select?: celularesSelect<ExtArgs> | null
    /**
     * Filter, which celulares to fetch.
     */
    where?: celularesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of celulares to fetch.
     */
    orderBy?: celularesOrderByWithRelationInput | celularesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for celulares.
     */
    cursor?: celularesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` celulares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` celulares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of celulares.
     */
    distinct?: CelularesScalarFieldEnum | CelularesScalarFieldEnum[]
  }

  /**
   * celulares findFirstOrThrow
   */
  export type celularesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the celulares
     */
    select?: celularesSelect<ExtArgs> | null
    /**
     * Filter, which celulares to fetch.
     */
    where?: celularesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of celulares to fetch.
     */
    orderBy?: celularesOrderByWithRelationInput | celularesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for celulares.
     */
    cursor?: celularesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` celulares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` celulares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of celulares.
     */
    distinct?: CelularesScalarFieldEnum | CelularesScalarFieldEnum[]
  }

  /**
   * celulares findMany
   */
  export type celularesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the celulares
     */
    select?: celularesSelect<ExtArgs> | null
    /**
     * Filter, which celulares to fetch.
     */
    where?: celularesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of celulares to fetch.
     */
    orderBy?: celularesOrderByWithRelationInput | celularesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing celulares.
     */
    cursor?: celularesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` celulares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` celulares.
     */
    skip?: number
    distinct?: CelularesScalarFieldEnum | CelularesScalarFieldEnum[]
  }

  /**
   * celulares create
   */
  export type celularesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the celulares
     */
    select?: celularesSelect<ExtArgs> | null
    /**
     * The data needed to create a celulares.
     */
    data: XOR<celularesCreateInput, celularesUncheckedCreateInput>
  }

  /**
   * celulares createMany
   */
  export type celularesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many celulares.
     */
    data: celularesCreateManyInput | celularesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * celulares update
   */
  export type celularesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the celulares
     */
    select?: celularesSelect<ExtArgs> | null
    /**
     * The data needed to update a celulares.
     */
    data: XOR<celularesUpdateInput, celularesUncheckedUpdateInput>
    /**
     * Choose, which celulares to update.
     */
    where: celularesWhereUniqueInput
  }

  /**
   * celulares updateMany
   */
  export type celularesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update celulares.
     */
    data: XOR<celularesUpdateManyMutationInput, celularesUncheckedUpdateManyInput>
    /**
     * Filter which celulares to update
     */
    where?: celularesWhereInput
  }

  /**
   * celulares upsert
   */
  export type celularesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the celulares
     */
    select?: celularesSelect<ExtArgs> | null
    /**
     * The filter to search for the celulares to update in case it exists.
     */
    where: celularesWhereUniqueInput
    /**
     * In case the celulares found by the `where` argument doesn't exist, create a new celulares with this data.
     */
    create: XOR<celularesCreateInput, celularesUncheckedCreateInput>
    /**
     * In case the celulares was found with the provided `where` argument, update it with this data.
     */
    update: XOR<celularesUpdateInput, celularesUncheckedUpdateInput>
  }

  /**
   * celulares delete
   */
  export type celularesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the celulares
     */
    select?: celularesSelect<ExtArgs> | null
    /**
     * Filter which celulares to delete.
     */
    where: celularesWhereUniqueInput
  }

  /**
   * celulares deleteMany
   */
  export type celularesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which celulares to delete
     */
    where?: celularesWhereInput
  }

  /**
   * celulares without action
   */
  export type celularesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the celulares
     */
    select?: celularesSelect<ExtArgs> | null
  }


  /**
   * Model computadores
   */

  export type AggregateComputadores = {
    _count: ComputadoresCountAggregateOutputType | null
    _avg: ComputadoresAvgAggregateOutputType | null
    _sum: ComputadoresSumAggregateOutputType | null
    _min: ComputadoresMinAggregateOutputType | null
    _max: ComputadoresMaxAggregateOutputType | null
  }

  export type ComputadoresAvgAggregateOutputType = {
    id: number | null
    precio: number | null
  }

  export type ComputadoresSumAggregateOutputType = {
    id: number | null
    precio: number | null
  }

  export type ComputadoresMinAggregateOutputType = {
    id: number | null
    marca: string | null
    modelo: string | null
    color: string | null
    precio: number | null
    sistemaOperativo: string | null
    RAM: string | null
    almacenamiento: string | null
    pantalla: string | null
  }

  export type ComputadoresMaxAggregateOutputType = {
    id: number | null
    marca: string | null
    modelo: string | null
    color: string | null
    precio: number | null
    sistemaOperativo: string | null
    RAM: string | null
    almacenamiento: string | null
    pantalla: string | null
  }

  export type ComputadoresCountAggregateOutputType = {
    id: number
    marca: number
    modelo: number
    color: number
    precio: number
    sistemaOperativo: number
    RAM: number
    almacenamiento: number
    pantalla: number
    _all: number
  }


  export type ComputadoresAvgAggregateInputType = {
    id?: true
    precio?: true
  }

  export type ComputadoresSumAggregateInputType = {
    id?: true
    precio?: true
  }

  export type ComputadoresMinAggregateInputType = {
    id?: true
    marca?: true
    modelo?: true
    color?: true
    precio?: true
    sistemaOperativo?: true
    RAM?: true
    almacenamiento?: true
    pantalla?: true
  }

  export type ComputadoresMaxAggregateInputType = {
    id?: true
    marca?: true
    modelo?: true
    color?: true
    precio?: true
    sistemaOperativo?: true
    RAM?: true
    almacenamiento?: true
    pantalla?: true
  }

  export type ComputadoresCountAggregateInputType = {
    id?: true
    marca?: true
    modelo?: true
    color?: true
    precio?: true
    sistemaOperativo?: true
    RAM?: true
    almacenamiento?: true
    pantalla?: true
    _all?: true
  }

  export type ComputadoresAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which computadores to aggregate.
     */
    where?: computadoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of computadores to fetch.
     */
    orderBy?: computadoresOrderByWithRelationInput | computadoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: computadoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` computadores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` computadores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned computadores
    **/
    _count?: true | ComputadoresCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ComputadoresAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ComputadoresSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ComputadoresMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ComputadoresMaxAggregateInputType
  }

  export type GetComputadoresAggregateType<T extends ComputadoresAggregateArgs> = {
        [P in keyof T & keyof AggregateComputadores]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComputadores[P]>
      : GetScalarType<T[P], AggregateComputadores[P]>
  }




  export type computadoresGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: computadoresWhereInput
    orderBy?: computadoresOrderByWithAggregationInput | computadoresOrderByWithAggregationInput[]
    by: ComputadoresScalarFieldEnum[] | ComputadoresScalarFieldEnum
    having?: computadoresScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ComputadoresCountAggregateInputType | true
    _avg?: ComputadoresAvgAggregateInputType
    _sum?: ComputadoresSumAggregateInputType
    _min?: ComputadoresMinAggregateInputType
    _max?: ComputadoresMaxAggregateInputType
  }

  export type ComputadoresGroupByOutputType = {
    id: number
    marca: string
    modelo: string
    color: string
    precio: number
    sistemaOperativo: string
    RAM: string
    almacenamiento: string
    pantalla: string
    _count: ComputadoresCountAggregateOutputType | null
    _avg: ComputadoresAvgAggregateOutputType | null
    _sum: ComputadoresSumAggregateOutputType | null
    _min: ComputadoresMinAggregateOutputType | null
    _max: ComputadoresMaxAggregateOutputType | null
  }

  type GetComputadoresGroupByPayload<T extends computadoresGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ComputadoresGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ComputadoresGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ComputadoresGroupByOutputType[P]>
            : GetScalarType<T[P], ComputadoresGroupByOutputType[P]>
        }
      >
    >


  export type computadoresSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    marca?: boolean
    modelo?: boolean
    color?: boolean
    precio?: boolean
    sistemaOperativo?: boolean
    RAM?: boolean
    almacenamiento?: boolean
    pantalla?: boolean
  }, ExtArgs["result"]["computadores"]>

  export type computadoresSelectScalar = {
    id?: boolean
    marca?: boolean
    modelo?: boolean
    color?: boolean
    precio?: boolean
    sistemaOperativo?: boolean
    RAM?: boolean
    almacenamiento?: boolean
    pantalla?: boolean
  }



  export type $computadoresPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "computadores"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      marca: string
      modelo: string
      color: string
      precio: number
      sistemaOperativo: string
      RAM: string
      almacenamiento: string
      pantalla: string
    }, ExtArgs["result"]["computadores"]>
    composites: {}
  }


  type computadoresGetPayload<S extends boolean | null | undefined | computadoresDefaultArgs> = $Result.GetResult<Prisma.$computadoresPayload, S>

  type computadoresCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<computadoresFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ComputadoresCountAggregateInputType | true
    }

  export interface computadoresDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['computadores'], meta: { name: 'computadores' } }
    /**
     * Find zero or one Computadores that matches the filter.
     * @param {computadoresFindUniqueArgs} args - Arguments to find a Computadores
     * @example
     * // Get one Computadores
     * const computadores = await prisma.computadores.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends computadoresFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, computadoresFindUniqueArgs<ExtArgs>>
    ): Prisma__computadoresClient<$Result.GetResult<Prisma.$computadoresPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Computadores that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {computadoresFindUniqueOrThrowArgs} args - Arguments to find a Computadores
     * @example
     * // Get one Computadores
     * const computadores = await prisma.computadores.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends computadoresFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, computadoresFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__computadoresClient<$Result.GetResult<Prisma.$computadoresPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Computadores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {computadoresFindFirstArgs} args - Arguments to find a Computadores
     * @example
     * // Get one Computadores
     * const computadores = await prisma.computadores.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends computadoresFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, computadoresFindFirstArgs<ExtArgs>>
    ): Prisma__computadoresClient<$Result.GetResult<Prisma.$computadoresPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Computadores that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {computadoresFindFirstOrThrowArgs} args - Arguments to find a Computadores
     * @example
     * // Get one Computadores
     * const computadores = await prisma.computadores.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends computadoresFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, computadoresFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__computadoresClient<$Result.GetResult<Prisma.$computadoresPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Computadores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {computadoresFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Computadores
     * const computadores = await prisma.computadores.findMany()
     * 
     * // Get first 10 Computadores
     * const computadores = await prisma.computadores.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const computadoresWithIdOnly = await prisma.computadores.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends computadoresFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, computadoresFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$computadoresPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Computadores.
     * @param {computadoresCreateArgs} args - Arguments to create a Computadores.
     * @example
     * // Create one Computadores
     * const Computadores = await prisma.computadores.create({
     *   data: {
     *     // ... data to create a Computadores
     *   }
     * })
     * 
    **/
    create<T extends computadoresCreateArgs<ExtArgs>>(
      args: SelectSubset<T, computadoresCreateArgs<ExtArgs>>
    ): Prisma__computadoresClient<$Result.GetResult<Prisma.$computadoresPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Computadores.
     * @param {computadoresCreateManyArgs} args - Arguments to create many Computadores.
     * @example
     * // Create many Computadores
     * const computadores = await prisma.computadores.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends computadoresCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, computadoresCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Computadores.
     * @param {computadoresDeleteArgs} args - Arguments to delete one Computadores.
     * @example
     * // Delete one Computadores
     * const Computadores = await prisma.computadores.delete({
     *   where: {
     *     // ... filter to delete one Computadores
     *   }
     * })
     * 
    **/
    delete<T extends computadoresDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, computadoresDeleteArgs<ExtArgs>>
    ): Prisma__computadoresClient<$Result.GetResult<Prisma.$computadoresPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Computadores.
     * @param {computadoresUpdateArgs} args - Arguments to update one Computadores.
     * @example
     * // Update one Computadores
     * const computadores = await prisma.computadores.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends computadoresUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, computadoresUpdateArgs<ExtArgs>>
    ): Prisma__computadoresClient<$Result.GetResult<Prisma.$computadoresPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Computadores.
     * @param {computadoresDeleteManyArgs} args - Arguments to filter Computadores to delete.
     * @example
     * // Delete a few Computadores
     * const { count } = await prisma.computadores.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends computadoresDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, computadoresDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Computadores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {computadoresUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Computadores
     * const computadores = await prisma.computadores.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends computadoresUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, computadoresUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Computadores.
     * @param {computadoresUpsertArgs} args - Arguments to update or create a Computadores.
     * @example
     * // Update or create a Computadores
     * const computadores = await prisma.computadores.upsert({
     *   create: {
     *     // ... data to create a Computadores
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Computadores we want to update
     *   }
     * })
    **/
    upsert<T extends computadoresUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, computadoresUpsertArgs<ExtArgs>>
    ): Prisma__computadoresClient<$Result.GetResult<Prisma.$computadoresPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Computadores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {computadoresCountArgs} args - Arguments to filter Computadores to count.
     * @example
     * // Count the number of Computadores
     * const count = await prisma.computadores.count({
     *   where: {
     *     // ... the filter for the Computadores we want to count
     *   }
     * })
    **/
    count<T extends computadoresCountArgs>(
      args?: Subset<T, computadoresCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ComputadoresCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Computadores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComputadoresAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ComputadoresAggregateArgs>(args: Subset<T, ComputadoresAggregateArgs>): Prisma.PrismaPromise<GetComputadoresAggregateType<T>>

    /**
     * Group by Computadores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {computadoresGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends computadoresGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: computadoresGroupByArgs['orderBy'] }
        : { orderBy?: computadoresGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, computadoresGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetComputadoresGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the computadores model
   */
  readonly fields: computadoresFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for computadores.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__computadoresClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the computadores model
   */ 
  interface computadoresFieldRefs {
    readonly id: FieldRef<"computadores", 'Int'>
    readonly marca: FieldRef<"computadores", 'String'>
    readonly modelo: FieldRef<"computadores", 'String'>
    readonly color: FieldRef<"computadores", 'String'>
    readonly precio: FieldRef<"computadores", 'Float'>
    readonly sistemaOperativo: FieldRef<"computadores", 'String'>
    readonly RAM: FieldRef<"computadores", 'String'>
    readonly almacenamiento: FieldRef<"computadores", 'String'>
    readonly pantalla: FieldRef<"computadores", 'String'>
  }
    

  // Custom InputTypes
  /**
   * computadores findUnique
   */
  export type computadoresFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the computadores
     */
    select?: computadoresSelect<ExtArgs> | null
    /**
     * Filter, which computadores to fetch.
     */
    where: computadoresWhereUniqueInput
  }

  /**
   * computadores findUniqueOrThrow
   */
  export type computadoresFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the computadores
     */
    select?: computadoresSelect<ExtArgs> | null
    /**
     * Filter, which computadores to fetch.
     */
    where: computadoresWhereUniqueInput
  }

  /**
   * computadores findFirst
   */
  export type computadoresFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the computadores
     */
    select?: computadoresSelect<ExtArgs> | null
    /**
     * Filter, which computadores to fetch.
     */
    where?: computadoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of computadores to fetch.
     */
    orderBy?: computadoresOrderByWithRelationInput | computadoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for computadores.
     */
    cursor?: computadoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` computadores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` computadores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of computadores.
     */
    distinct?: ComputadoresScalarFieldEnum | ComputadoresScalarFieldEnum[]
  }

  /**
   * computadores findFirstOrThrow
   */
  export type computadoresFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the computadores
     */
    select?: computadoresSelect<ExtArgs> | null
    /**
     * Filter, which computadores to fetch.
     */
    where?: computadoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of computadores to fetch.
     */
    orderBy?: computadoresOrderByWithRelationInput | computadoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for computadores.
     */
    cursor?: computadoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` computadores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` computadores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of computadores.
     */
    distinct?: ComputadoresScalarFieldEnum | ComputadoresScalarFieldEnum[]
  }

  /**
   * computadores findMany
   */
  export type computadoresFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the computadores
     */
    select?: computadoresSelect<ExtArgs> | null
    /**
     * Filter, which computadores to fetch.
     */
    where?: computadoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of computadores to fetch.
     */
    orderBy?: computadoresOrderByWithRelationInput | computadoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing computadores.
     */
    cursor?: computadoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` computadores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` computadores.
     */
    skip?: number
    distinct?: ComputadoresScalarFieldEnum | ComputadoresScalarFieldEnum[]
  }

  /**
   * computadores create
   */
  export type computadoresCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the computadores
     */
    select?: computadoresSelect<ExtArgs> | null
    /**
     * The data needed to create a computadores.
     */
    data: XOR<computadoresCreateInput, computadoresUncheckedCreateInput>
  }

  /**
   * computadores createMany
   */
  export type computadoresCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many computadores.
     */
    data: computadoresCreateManyInput | computadoresCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * computadores update
   */
  export type computadoresUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the computadores
     */
    select?: computadoresSelect<ExtArgs> | null
    /**
     * The data needed to update a computadores.
     */
    data: XOR<computadoresUpdateInput, computadoresUncheckedUpdateInput>
    /**
     * Choose, which computadores to update.
     */
    where: computadoresWhereUniqueInput
  }

  /**
   * computadores updateMany
   */
  export type computadoresUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update computadores.
     */
    data: XOR<computadoresUpdateManyMutationInput, computadoresUncheckedUpdateManyInput>
    /**
     * Filter which computadores to update
     */
    where?: computadoresWhereInput
  }

  /**
   * computadores upsert
   */
  export type computadoresUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the computadores
     */
    select?: computadoresSelect<ExtArgs> | null
    /**
     * The filter to search for the computadores to update in case it exists.
     */
    where: computadoresWhereUniqueInput
    /**
     * In case the computadores found by the `where` argument doesn't exist, create a new computadores with this data.
     */
    create: XOR<computadoresCreateInput, computadoresUncheckedCreateInput>
    /**
     * In case the computadores was found with the provided `where` argument, update it with this data.
     */
    update: XOR<computadoresUpdateInput, computadoresUncheckedUpdateInput>
  }

  /**
   * computadores delete
   */
  export type computadoresDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the computadores
     */
    select?: computadoresSelect<ExtArgs> | null
    /**
     * Filter which computadores to delete.
     */
    where: computadoresWhereUniqueInput
  }

  /**
   * computadores deleteMany
   */
  export type computadoresDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which computadores to delete
     */
    where?: computadoresWhereInput
  }

  /**
   * computadores without action
   */
  export type computadoresDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the computadores
     */
    select?: computadoresSelect<ExtArgs> | null
  }


  /**
   * Model televisores
   */

  export type AggregateTelevisores = {
    _count: TelevisoresCountAggregateOutputType | null
    _avg: TelevisoresAvgAggregateOutputType | null
    _sum: TelevisoresSumAggregateOutputType | null
    _min: TelevisoresMinAggregateOutputType | null
    _max: TelevisoresMaxAggregateOutputType | null
  }

  export type TelevisoresAvgAggregateOutputType = {
    id: number | null
    precio: number | null
  }

  export type TelevisoresSumAggregateOutputType = {
    id: number | null
    precio: number | null
  }

  export type TelevisoresMinAggregateOutputType = {
    id: number | null
    marca: string | null
    modelo: string | null
    precio: number | null
    resolucion: string | null
    sistemaOperativo: string | null
    color: string | null
  }

  export type TelevisoresMaxAggregateOutputType = {
    id: number | null
    marca: string | null
    modelo: string | null
    precio: number | null
    resolucion: string | null
    sistemaOperativo: string | null
    color: string | null
  }

  export type TelevisoresCountAggregateOutputType = {
    id: number
    marca: number
    modelo: number
    precio: number
    resolucion: number
    sistemaOperativo: number
    color: number
    _all: number
  }


  export type TelevisoresAvgAggregateInputType = {
    id?: true
    precio?: true
  }

  export type TelevisoresSumAggregateInputType = {
    id?: true
    precio?: true
  }

  export type TelevisoresMinAggregateInputType = {
    id?: true
    marca?: true
    modelo?: true
    precio?: true
    resolucion?: true
    sistemaOperativo?: true
    color?: true
  }

  export type TelevisoresMaxAggregateInputType = {
    id?: true
    marca?: true
    modelo?: true
    precio?: true
    resolucion?: true
    sistemaOperativo?: true
    color?: true
  }

  export type TelevisoresCountAggregateInputType = {
    id?: true
    marca?: true
    modelo?: true
    precio?: true
    resolucion?: true
    sistemaOperativo?: true
    color?: true
    _all?: true
  }

  export type TelevisoresAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which televisores to aggregate.
     */
    where?: televisoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of televisores to fetch.
     */
    orderBy?: televisoresOrderByWithRelationInput | televisoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: televisoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` televisores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` televisores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned televisores
    **/
    _count?: true | TelevisoresCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TelevisoresAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TelevisoresSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TelevisoresMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TelevisoresMaxAggregateInputType
  }

  export type GetTelevisoresAggregateType<T extends TelevisoresAggregateArgs> = {
        [P in keyof T & keyof AggregateTelevisores]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTelevisores[P]>
      : GetScalarType<T[P], AggregateTelevisores[P]>
  }




  export type televisoresGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: televisoresWhereInput
    orderBy?: televisoresOrderByWithAggregationInput | televisoresOrderByWithAggregationInput[]
    by: TelevisoresScalarFieldEnum[] | TelevisoresScalarFieldEnum
    having?: televisoresScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TelevisoresCountAggregateInputType | true
    _avg?: TelevisoresAvgAggregateInputType
    _sum?: TelevisoresSumAggregateInputType
    _min?: TelevisoresMinAggregateInputType
    _max?: TelevisoresMaxAggregateInputType
  }

  export type TelevisoresGroupByOutputType = {
    id: number
    marca: string
    modelo: string
    precio: number
    resolucion: string
    sistemaOperativo: string
    color: string
    _count: TelevisoresCountAggregateOutputType | null
    _avg: TelevisoresAvgAggregateOutputType | null
    _sum: TelevisoresSumAggregateOutputType | null
    _min: TelevisoresMinAggregateOutputType | null
    _max: TelevisoresMaxAggregateOutputType | null
  }

  type GetTelevisoresGroupByPayload<T extends televisoresGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TelevisoresGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TelevisoresGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TelevisoresGroupByOutputType[P]>
            : GetScalarType<T[P], TelevisoresGroupByOutputType[P]>
        }
      >
    >


  export type televisoresSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    marca?: boolean
    modelo?: boolean
    precio?: boolean
    resolucion?: boolean
    sistemaOperativo?: boolean
    color?: boolean
  }, ExtArgs["result"]["televisores"]>

  export type televisoresSelectScalar = {
    id?: boolean
    marca?: boolean
    modelo?: boolean
    precio?: boolean
    resolucion?: boolean
    sistemaOperativo?: boolean
    color?: boolean
  }



  export type $televisoresPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "televisores"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      marca: string
      modelo: string
      precio: number
      resolucion: string
      sistemaOperativo: string
      color: string
    }, ExtArgs["result"]["televisores"]>
    composites: {}
  }


  type televisoresGetPayload<S extends boolean | null | undefined | televisoresDefaultArgs> = $Result.GetResult<Prisma.$televisoresPayload, S>

  type televisoresCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<televisoresFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TelevisoresCountAggregateInputType | true
    }

  export interface televisoresDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['televisores'], meta: { name: 'televisores' } }
    /**
     * Find zero or one Televisores that matches the filter.
     * @param {televisoresFindUniqueArgs} args - Arguments to find a Televisores
     * @example
     * // Get one Televisores
     * const televisores = await prisma.televisores.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends televisoresFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, televisoresFindUniqueArgs<ExtArgs>>
    ): Prisma__televisoresClient<$Result.GetResult<Prisma.$televisoresPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Televisores that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {televisoresFindUniqueOrThrowArgs} args - Arguments to find a Televisores
     * @example
     * // Get one Televisores
     * const televisores = await prisma.televisores.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends televisoresFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, televisoresFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__televisoresClient<$Result.GetResult<Prisma.$televisoresPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Televisores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {televisoresFindFirstArgs} args - Arguments to find a Televisores
     * @example
     * // Get one Televisores
     * const televisores = await prisma.televisores.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends televisoresFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, televisoresFindFirstArgs<ExtArgs>>
    ): Prisma__televisoresClient<$Result.GetResult<Prisma.$televisoresPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Televisores that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {televisoresFindFirstOrThrowArgs} args - Arguments to find a Televisores
     * @example
     * // Get one Televisores
     * const televisores = await prisma.televisores.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends televisoresFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, televisoresFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__televisoresClient<$Result.GetResult<Prisma.$televisoresPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Televisores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {televisoresFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Televisores
     * const televisores = await prisma.televisores.findMany()
     * 
     * // Get first 10 Televisores
     * const televisores = await prisma.televisores.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const televisoresWithIdOnly = await prisma.televisores.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends televisoresFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, televisoresFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$televisoresPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Televisores.
     * @param {televisoresCreateArgs} args - Arguments to create a Televisores.
     * @example
     * // Create one Televisores
     * const Televisores = await prisma.televisores.create({
     *   data: {
     *     // ... data to create a Televisores
     *   }
     * })
     * 
    **/
    create<T extends televisoresCreateArgs<ExtArgs>>(
      args: SelectSubset<T, televisoresCreateArgs<ExtArgs>>
    ): Prisma__televisoresClient<$Result.GetResult<Prisma.$televisoresPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Televisores.
     * @param {televisoresCreateManyArgs} args - Arguments to create many Televisores.
     * @example
     * // Create many Televisores
     * const televisores = await prisma.televisores.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends televisoresCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, televisoresCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Televisores.
     * @param {televisoresDeleteArgs} args - Arguments to delete one Televisores.
     * @example
     * // Delete one Televisores
     * const Televisores = await prisma.televisores.delete({
     *   where: {
     *     // ... filter to delete one Televisores
     *   }
     * })
     * 
    **/
    delete<T extends televisoresDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, televisoresDeleteArgs<ExtArgs>>
    ): Prisma__televisoresClient<$Result.GetResult<Prisma.$televisoresPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Televisores.
     * @param {televisoresUpdateArgs} args - Arguments to update one Televisores.
     * @example
     * // Update one Televisores
     * const televisores = await prisma.televisores.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends televisoresUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, televisoresUpdateArgs<ExtArgs>>
    ): Prisma__televisoresClient<$Result.GetResult<Prisma.$televisoresPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Televisores.
     * @param {televisoresDeleteManyArgs} args - Arguments to filter Televisores to delete.
     * @example
     * // Delete a few Televisores
     * const { count } = await prisma.televisores.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends televisoresDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, televisoresDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Televisores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {televisoresUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Televisores
     * const televisores = await prisma.televisores.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends televisoresUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, televisoresUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Televisores.
     * @param {televisoresUpsertArgs} args - Arguments to update or create a Televisores.
     * @example
     * // Update or create a Televisores
     * const televisores = await prisma.televisores.upsert({
     *   create: {
     *     // ... data to create a Televisores
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Televisores we want to update
     *   }
     * })
    **/
    upsert<T extends televisoresUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, televisoresUpsertArgs<ExtArgs>>
    ): Prisma__televisoresClient<$Result.GetResult<Prisma.$televisoresPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Televisores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {televisoresCountArgs} args - Arguments to filter Televisores to count.
     * @example
     * // Count the number of Televisores
     * const count = await prisma.televisores.count({
     *   where: {
     *     // ... the filter for the Televisores we want to count
     *   }
     * })
    **/
    count<T extends televisoresCountArgs>(
      args?: Subset<T, televisoresCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TelevisoresCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Televisores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TelevisoresAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TelevisoresAggregateArgs>(args: Subset<T, TelevisoresAggregateArgs>): Prisma.PrismaPromise<GetTelevisoresAggregateType<T>>

    /**
     * Group by Televisores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {televisoresGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends televisoresGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: televisoresGroupByArgs['orderBy'] }
        : { orderBy?: televisoresGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, televisoresGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTelevisoresGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the televisores model
   */
  readonly fields: televisoresFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for televisores.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__televisoresClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the televisores model
   */ 
  interface televisoresFieldRefs {
    readonly id: FieldRef<"televisores", 'Int'>
    readonly marca: FieldRef<"televisores", 'String'>
    readonly modelo: FieldRef<"televisores", 'String'>
    readonly precio: FieldRef<"televisores", 'Float'>
    readonly resolucion: FieldRef<"televisores", 'String'>
    readonly sistemaOperativo: FieldRef<"televisores", 'String'>
    readonly color: FieldRef<"televisores", 'String'>
  }
    

  // Custom InputTypes
  /**
   * televisores findUnique
   */
  export type televisoresFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the televisores
     */
    select?: televisoresSelect<ExtArgs> | null
    /**
     * Filter, which televisores to fetch.
     */
    where: televisoresWhereUniqueInput
  }

  /**
   * televisores findUniqueOrThrow
   */
  export type televisoresFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the televisores
     */
    select?: televisoresSelect<ExtArgs> | null
    /**
     * Filter, which televisores to fetch.
     */
    where: televisoresWhereUniqueInput
  }

  /**
   * televisores findFirst
   */
  export type televisoresFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the televisores
     */
    select?: televisoresSelect<ExtArgs> | null
    /**
     * Filter, which televisores to fetch.
     */
    where?: televisoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of televisores to fetch.
     */
    orderBy?: televisoresOrderByWithRelationInput | televisoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for televisores.
     */
    cursor?: televisoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` televisores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` televisores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of televisores.
     */
    distinct?: TelevisoresScalarFieldEnum | TelevisoresScalarFieldEnum[]
  }

  /**
   * televisores findFirstOrThrow
   */
  export type televisoresFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the televisores
     */
    select?: televisoresSelect<ExtArgs> | null
    /**
     * Filter, which televisores to fetch.
     */
    where?: televisoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of televisores to fetch.
     */
    orderBy?: televisoresOrderByWithRelationInput | televisoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for televisores.
     */
    cursor?: televisoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` televisores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` televisores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of televisores.
     */
    distinct?: TelevisoresScalarFieldEnum | TelevisoresScalarFieldEnum[]
  }

  /**
   * televisores findMany
   */
  export type televisoresFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the televisores
     */
    select?: televisoresSelect<ExtArgs> | null
    /**
     * Filter, which televisores to fetch.
     */
    where?: televisoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of televisores to fetch.
     */
    orderBy?: televisoresOrderByWithRelationInput | televisoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing televisores.
     */
    cursor?: televisoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` televisores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` televisores.
     */
    skip?: number
    distinct?: TelevisoresScalarFieldEnum | TelevisoresScalarFieldEnum[]
  }

  /**
   * televisores create
   */
  export type televisoresCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the televisores
     */
    select?: televisoresSelect<ExtArgs> | null
    /**
     * The data needed to create a televisores.
     */
    data: XOR<televisoresCreateInput, televisoresUncheckedCreateInput>
  }

  /**
   * televisores createMany
   */
  export type televisoresCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many televisores.
     */
    data: televisoresCreateManyInput | televisoresCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * televisores update
   */
  export type televisoresUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the televisores
     */
    select?: televisoresSelect<ExtArgs> | null
    /**
     * The data needed to update a televisores.
     */
    data: XOR<televisoresUpdateInput, televisoresUncheckedUpdateInput>
    /**
     * Choose, which televisores to update.
     */
    where: televisoresWhereUniqueInput
  }

  /**
   * televisores updateMany
   */
  export type televisoresUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update televisores.
     */
    data: XOR<televisoresUpdateManyMutationInput, televisoresUncheckedUpdateManyInput>
    /**
     * Filter which televisores to update
     */
    where?: televisoresWhereInput
  }

  /**
   * televisores upsert
   */
  export type televisoresUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the televisores
     */
    select?: televisoresSelect<ExtArgs> | null
    /**
     * The filter to search for the televisores to update in case it exists.
     */
    where: televisoresWhereUniqueInput
    /**
     * In case the televisores found by the `where` argument doesn't exist, create a new televisores with this data.
     */
    create: XOR<televisoresCreateInput, televisoresUncheckedCreateInput>
    /**
     * In case the televisores was found with the provided `where` argument, update it with this data.
     */
    update: XOR<televisoresUpdateInput, televisoresUncheckedUpdateInput>
  }

  /**
   * televisores delete
   */
  export type televisoresDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the televisores
     */
    select?: televisoresSelect<ExtArgs> | null
    /**
     * Filter which televisores to delete.
     */
    where: televisoresWhereUniqueInput
  }

  /**
   * televisores deleteMany
   */
  export type televisoresDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which televisores to delete
     */
    where?: televisoresWhereInput
  }

  /**
   * televisores without action
   */
  export type televisoresDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the televisores
     */
    select?: televisoresSelect<ExtArgs> | null
  }


  /**
   * Model consolas
   */

  export type AggregateConsolas = {
    _count: ConsolasCountAggregateOutputType | null
    _avg: ConsolasAvgAggregateOutputType | null
    _sum: ConsolasSumAggregateOutputType | null
    _min: ConsolasMinAggregateOutputType | null
    _max: ConsolasMaxAggregateOutputType | null
  }

  export type ConsolasAvgAggregateOutputType = {
    id: number | null
    precio: number | null
  }

  export type ConsolasSumAggregateOutputType = {
    id: number | null
    precio: number | null
  }

  export type ConsolasMinAggregateOutputType = {
    id: number | null
    marca: string | null
    modelo: string | null
    precio: number | null
    color: string | null
    almacenamiento: string | null
    sistemaOperativo: string | null
    RAM: string | null
  }

  export type ConsolasMaxAggregateOutputType = {
    id: number | null
    marca: string | null
    modelo: string | null
    precio: number | null
    color: string | null
    almacenamiento: string | null
    sistemaOperativo: string | null
    RAM: string | null
  }

  export type ConsolasCountAggregateOutputType = {
    id: number
    marca: number
    modelo: number
    precio: number
    color: number
    almacenamiento: number
    sistemaOperativo: number
    RAM: number
    _all: number
  }


  export type ConsolasAvgAggregateInputType = {
    id?: true
    precio?: true
  }

  export type ConsolasSumAggregateInputType = {
    id?: true
    precio?: true
  }

  export type ConsolasMinAggregateInputType = {
    id?: true
    marca?: true
    modelo?: true
    precio?: true
    color?: true
    almacenamiento?: true
    sistemaOperativo?: true
    RAM?: true
  }

  export type ConsolasMaxAggregateInputType = {
    id?: true
    marca?: true
    modelo?: true
    precio?: true
    color?: true
    almacenamiento?: true
    sistemaOperativo?: true
    RAM?: true
  }

  export type ConsolasCountAggregateInputType = {
    id?: true
    marca?: true
    modelo?: true
    precio?: true
    color?: true
    almacenamiento?: true
    sistemaOperativo?: true
    RAM?: true
    _all?: true
  }

  export type ConsolasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which consolas to aggregate.
     */
    where?: consolasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of consolas to fetch.
     */
    orderBy?: consolasOrderByWithRelationInput | consolasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: consolasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` consolas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` consolas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned consolas
    **/
    _count?: true | ConsolasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ConsolasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ConsolasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConsolasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConsolasMaxAggregateInputType
  }

  export type GetConsolasAggregateType<T extends ConsolasAggregateArgs> = {
        [P in keyof T & keyof AggregateConsolas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConsolas[P]>
      : GetScalarType<T[P], AggregateConsolas[P]>
  }




  export type consolasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: consolasWhereInput
    orderBy?: consolasOrderByWithAggregationInput | consolasOrderByWithAggregationInput[]
    by: ConsolasScalarFieldEnum[] | ConsolasScalarFieldEnum
    having?: consolasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConsolasCountAggregateInputType | true
    _avg?: ConsolasAvgAggregateInputType
    _sum?: ConsolasSumAggregateInputType
    _min?: ConsolasMinAggregateInputType
    _max?: ConsolasMaxAggregateInputType
  }

  export type ConsolasGroupByOutputType = {
    id: number
    marca: string
    modelo: string
    precio: number
    color: string
    almacenamiento: string
    sistemaOperativo: string
    RAM: string
    _count: ConsolasCountAggregateOutputType | null
    _avg: ConsolasAvgAggregateOutputType | null
    _sum: ConsolasSumAggregateOutputType | null
    _min: ConsolasMinAggregateOutputType | null
    _max: ConsolasMaxAggregateOutputType | null
  }

  type GetConsolasGroupByPayload<T extends consolasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConsolasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConsolasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConsolasGroupByOutputType[P]>
            : GetScalarType<T[P], ConsolasGroupByOutputType[P]>
        }
      >
    >


  export type consolasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    marca?: boolean
    modelo?: boolean
    precio?: boolean
    color?: boolean
    almacenamiento?: boolean
    sistemaOperativo?: boolean
    RAM?: boolean
  }, ExtArgs["result"]["consolas"]>

  export type consolasSelectScalar = {
    id?: boolean
    marca?: boolean
    modelo?: boolean
    precio?: boolean
    color?: boolean
    almacenamiento?: boolean
    sistemaOperativo?: boolean
    RAM?: boolean
  }



  export type $consolasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "consolas"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      marca: string
      modelo: string
      precio: number
      color: string
      almacenamiento: string
      sistemaOperativo: string
      RAM: string
    }, ExtArgs["result"]["consolas"]>
    composites: {}
  }


  type consolasGetPayload<S extends boolean | null | undefined | consolasDefaultArgs> = $Result.GetResult<Prisma.$consolasPayload, S>

  type consolasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<consolasFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ConsolasCountAggregateInputType | true
    }

  export interface consolasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['consolas'], meta: { name: 'consolas' } }
    /**
     * Find zero or one Consolas that matches the filter.
     * @param {consolasFindUniqueArgs} args - Arguments to find a Consolas
     * @example
     * // Get one Consolas
     * const consolas = await prisma.consolas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends consolasFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, consolasFindUniqueArgs<ExtArgs>>
    ): Prisma__consolasClient<$Result.GetResult<Prisma.$consolasPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Consolas that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {consolasFindUniqueOrThrowArgs} args - Arguments to find a Consolas
     * @example
     * // Get one Consolas
     * const consolas = await prisma.consolas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends consolasFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, consolasFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__consolasClient<$Result.GetResult<Prisma.$consolasPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Consolas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {consolasFindFirstArgs} args - Arguments to find a Consolas
     * @example
     * // Get one Consolas
     * const consolas = await prisma.consolas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends consolasFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, consolasFindFirstArgs<ExtArgs>>
    ): Prisma__consolasClient<$Result.GetResult<Prisma.$consolasPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Consolas that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {consolasFindFirstOrThrowArgs} args - Arguments to find a Consolas
     * @example
     * // Get one Consolas
     * const consolas = await prisma.consolas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends consolasFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, consolasFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__consolasClient<$Result.GetResult<Prisma.$consolasPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Consolas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {consolasFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Consolas
     * const consolas = await prisma.consolas.findMany()
     * 
     * // Get first 10 Consolas
     * const consolas = await prisma.consolas.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const consolasWithIdOnly = await prisma.consolas.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends consolasFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, consolasFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$consolasPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Consolas.
     * @param {consolasCreateArgs} args - Arguments to create a Consolas.
     * @example
     * // Create one Consolas
     * const Consolas = await prisma.consolas.create({
     *   data: {
     *     // ... data to create a Consolas
     *   }
     * })
     * 
    **/
    create<T extends consolasCreateArgs<ExtArgs>>(
      args: SelectSubset<T, consolasCreateArgs<ExtArgs>>
    ): Prisma__consolasClient<$Result.GetResult<Prisma.$consolasPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Consolas.
     * @param {consolasCreateManyArgs} args - Arguments to create many Consolas.
     * @example
     * // Create many Consolas
     * const consolas = await prisma.consolas.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends consolasCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, consolasCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Consolas.
     * @param {consolasDeleteArgs} args - Arguments to delete one Consolas.
     * @example
     * // Delete one Consolas
     * const Consolas = await prisma.consolas.delete({
     *   where: {
     *     // ... filter to delete one Consolas
     *   }
     * })
     * 
    **/
    delete<T extends consolasDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, consolasDeleteArgs<ExtArgs>>
    ): Prisma__consolasClient<$Result.GetResult<Prisma.$consolasPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Consolas.
     * @param {consolasUpdateArgs} args - Arguments to update one Consolas.
     * @example
     * // Update one Consolas
     * const consolas = await prisma.consolas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends consolasUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, consolasUpdateArgs<ExtArgs>>
    ): Prisma__consolasClient<$Result.GetResult<Prisma.$consolasPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Consolas.
     * @param {consolasDeleteManyArgs} args - Arguments to filter Consolas to delete.
     * @example
     * // Delete a few Consolas
     * const { count } = await prisma.consolas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends consolasDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, consolasDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Consolas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {consolasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Consolas
     * const consolas = await prisma.consolas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends consolasUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, consolasUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Consolas.
     * @param {consolasUpsertArgs} args - Arguments to update or create a Consolas.
     * @example
     * // Update or create a Consolas
     * const consolas = await prisma.consolas.upsert({
     *   create: {
     *     // ... data to create a Consolas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Consolas we want to update
     *   }
     * })
    **/
    upsert<T extends consolasUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, consolasUpsertArgs<ExtArgs>>
    ): Prisma__consolasClient<$Result.GetResult<Prisma.$consolasPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Consolas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {consolasCountArgs} args - Arguments to filter Consolas to count.
     * @example
     * // Count the number of Consolas
     * const count = await prisma.consolas.count({
     *   where: {
     *     // ... the filter for the Consolas we want to count
     *   }
     * })
    **/
    count<T extends consolasCountArgs>(
      args?: Subset<T, consolasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConsolasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Consolas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsolasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConsolasAggregateArgs>(args: Subset<T, ConsolasAggregateArgs>): Prisma.PrismaPromise<GetConsolasAggregateType<T>>

    /**
     * Group by Consolas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {consolasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends consolasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: consolasGroupByArgs['orderBy'] }
        : { orderBy?: consolasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, consolasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConsolasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the consolas model
   */
  readonly fields: consolasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for consolas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__consolasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the consolas model
   */ 
  interface consolasFieldRefs {
    readonly id: FieldRef<"consolas", 'Int'>
    readonly marca: FieldRef<"consolas", 'String'>
    readonly modelo: FieldRef<"consolas", 'String'>
    readonly precio: FieldRef<"consolas", 'Float'>
    readonly color: FieldRef<"consolas", 'String'>
    readonly almacenamiento: FieldRef<"consolas", 'String'>
    readonly sistemaOperativo: FieldRef<"consolas", 'String'>
    readonly RAM: FieldRef<"consolas", 'String'>
  }
    

  // Custom InputTypes
  /**
   * consolas findUnique
   */
  export type consolasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consolas
     */
    select?: consolasSelect<ExtArgs> | null
    /**
     * Filter, which consolas to fetch.
     */
    where: consolasWhereUniqueInput
  }

  /**
   * consolas findUniqueOrThrow
   */
  export type consolasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consolas
     */
    select?: consolasSelect<ExtArgs> | null
    /**
     * Filter, which consolas to fetch.
     */
    where: consolasWhereUniqueInput
  }

  /**
   * consolas findFirst
   */
  export type consolasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consolas
     */
    select?: consolasSelect<ExtArgs> | null
    /**
     * Filter, which consolas to fetch.
     */
    where?: consolasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of consolas to fetch.
     */
    orderBy?: consolasOrderByWithRelationInput | consolasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for consolas.
     */
    cursor?: consolasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` consolas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` consolas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of consolas.
     */
    distinct?: ConsolasScalarFieldEnum | ConsolasScalarFieldEnum[]
  }

  /**
   * consolas findFirstOrThrow
   */
  export type consolasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consolas
     */
    select?: consolasSelect<ExtArgs> | null
    /**
     * Filter, which consolas to fetch.
     */
    where?: consolasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of consolas to fetch.
     */
    orderBy?: consolasOrderByWithRelationInput | consolasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for consolas.
     */
    cursor?: consolasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` consolas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` consolas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of consolas.
     */
    distinct?: ConsolasScalarFieldEnum | ConsolasScalarFieldEnum[]
  }

  /**
   * consolas findMany
   */
  export type consolasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consolas
     */
    select?: consolasSelect<ExtArgs> | null
    /**
     * Filter, which consolas to fetch.
     */
    where?: consolasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of consolas to fetch.
     */
    orderBy?: consolasOrderByWithRelationInput | consolasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing consolas.
     */
    cursor?: consolasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` consolas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` consolas.
     */
    skip?: number
    distinct?: ConsolasScalarFieldEnum | ConsolasScalarFieldEnum[]
  }

  /**
   * consolas create
   */
  export type consolasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consolas
     */
    select?: consolasSelect<ExtArgs> | null
    /**
     * The data needed to create a consolas.
     */
    data: XOR<consolasCreateInput, consolasUncheckedCreateInput>
  }

  /**
   * consolas createMany
   */
  export type consolasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many consolas.
     */
    data: consolasCreateManyInput | consolasCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * consolas update
   */
  export type consolasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consolas
     */
    select?: consolasSelect<ExtArgs> | null
    /**
     * The data needed to update a consolas.
     */
    data: XOR<consolasUpdateInput, consolasUncheckedUpdateInput>
    /**
     * Choose, which consolas to update.
     */
    where: consolasWhereUniqueInput
  }

  /**
   * consolas updateMany
   */
  export type consolasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update consolas.
     */
    data: XOR<consolasUpdateManyMutationInput, consolasUncheckedUpdateManyInput>
    /**
     * Filter which consolas to update
     */
    where?: consolasWhereInput
  }

  /**
   * consolas upsert
   */
  export type consolasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consolas
     */
    select?: consolasSelect<ExtArgs> | null
    /**
     * The filter to search for the consolas to update in case it exists.
     */
    where: consolasWhereUniqueInput
    /**
     * In case the consolas found by the `where` argument doesn't exist, create a new consolas with this data.
     */
    create: XOR<consolasCreateInput, consolasUncheckedCreateInput>
    /**
     * In case the consolas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<consolasUpdateInput, consolasUncheckedUpdateInput>
  }

  /**
   * consolas delete
   */
  export type consolasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consolas
     */
    select?: consolasSelect<ExtArgs> | null
    /**
     * Filter which consolas to delete.
     */
    where: consolasWhereUniqueInput
  }

  /**
   * consolas deleteMany
   */
  export type consolasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which consolas to delete
     */
    where?: consolasWhereInput
  }

  /**
   * consolas without action
   */
  export type consolasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consolas
     */
    select?: consolasSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const SucursalesScalarFieldEnum: {
    id: 'id',
    departamento: 'departamento',
    nombre: 'nombre'
  };

  export type SucursalesScalarFieldEnum = (typeof SucursalesScalarFieldEnum)[keyof typeof SucursalesScalarFieldEnum]


  export const CiudadesScalarFieldEnum: {
    id: 'id',
    pais: 'pais',
    ciudad: 'ciudad',
    codigoPostal: 'codigoPostal'
  };

  export type CiudadesScalarFieldEnum = (typeof CiudadesScalarFieldEnum)[keyof typeof CiudadesScalarFieldEnum]


  export const MetodoPagoScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre'
  };

  export type MetodoPagoScalarFieldEnum = (typeof MetodoPagoScalarFieldEnum)[keyof typeof MetodoPagoScalarFieldEnum]


  export const CelularesScalarFieldEnum: {
    id: 'id',
    marca: 'marca',
    modelo: 'modelo',
    color: 'color',
    precio: 'precio',
    sistemaOperativo: 'sistemaOperativo',
    pantalla: 'pantalla',
    RAM: 'RAM',
    almacenamiento: 'almacenamiento'
  };

  export type CelularesScalarFieldEnum = (typeof CelularesScalarFieldEnum)[keyof typeof CelularesScalarFieldEnum]


  export const ComputadoresScalarFieldEnum: {
    id: 'id',
    marca: 'marca',
    modelo: 'modelo',
    color: 'color',
    precio: 'precio',
    sistemaOperativo: 'sistemaOperativo',
    RAM: 'RAM',
    almacenamiento: 'almacenamiento',
    pantalla: 'pantalla'
  };

  export type ComputadoresScalarFieldEnum = (typeof ComputadoresScalarFieldEnum)[keyof typeof ComputadoresScalarFieldEnum]


  export const TelevisoresScalarFieldEnum: {
    id: 'id',
    marca: 'marca',
    modelo: 'modelo',
    precio: 'precio',
    resolucion: 'resolucion',
    sistemaOperativo: 'sistemaOperativo',
    color: 'color'
  };

  export type TelevisoresScalarFieldEnum = (typeof TelevisoresScalarFieldEnum)[keyof typeof TelevisoresScalarFieldEnum]


  export const ConsolasScalarFieldEnum: {
    id: 'id',
    marca: 'marca',
    modelo: 'modelo',
    precio: 'precio',
    color: 'color',
    almacenamiento: 'almacenamiento',
    sistemaOperativo: 'sistemaOperativo',
    RAM: 'RAM'
  };

  export type ConsolasScalarFieldEnum = (typeof ConsolasScalarFieldEnum)[keyof typeof ConsolasScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type sucursalesWhereInput = {
    AND?: sucursalesWhereInput | sucursalesWhereInput[]
    OR?: sucursalesWhereInput[]
    NOT?: sucursalesWhereInput | sucursalesWhereInput[]
    id?: IntFilter<"sucursales"> | number
    departamento?: StringFilter<"sucursales"> | string
    nombre?: StringFilter<"sucursales"> | string
  }

  export type sucursalesOrderByWithRelationInput = {
    id?: SortOrder
    departamento?: SortOrder
    nombre?: SortOrder
  }

  export type sucursalesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: sucursalesWhereInput | sucursalesWhereInput[]
    OR?: sucursalesWhereInput[]
    NOT?: sucursalesWhereInput | sucursalesWhereInput[]
    departamento?: StringFilter<"sucursales"> | string
    nombre?: StringFilter<"sucursales"> | string
  }, "id">

  export type sucursalesOrderByWithAggregationInput = {
    id?: SortOrder
    departamento?: SortOrder
    nombre?: SortOrder
    _count?: sucursalesCountOrderByAggregateInput
    _avg?: sucursalesAvgOrderByAggregateInput
    _max?: sucursalesMaxOrderByAggregateInput
    _min?: sucursalesMinOrderByAggregateInput
    _sum?: sucursalesSumOrderByAggregateInput
  }

  export type sucursalesScalarWhereWithAggregatesInput = {
    AND?: sucursalesScalarWhereWithAggregatesInput | sucursalesScalarWhereWithAggregatesInput[]
    OR?: sucursalesScalarWhereWithAggregatesInput[]
    NOT?: sucursalesScalarWhereWithAggregatesInput | sucursalesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"sucursales"> | number
    departamento?: StringWithAggregatesFilter<"sucursales"> | string
    nombre?: StringWithAggregatesFilter<"sucursales"> | string
  }

  export type ciudadesWhereInput = {
    AND?: ciudadesWhereInput | ciudadesWhereInput[]
    OR?: ciudadesWhereInput[]
    NOT?: ciudadesWhereInput | ciudadesWhereInput[]
    id?: IntFilter<"ciudades"> | number
    pais?: StringFilter<"ciudades"> | string
    ciudad?: StringFilter<"ciudades"> | string
    codigoPostal?: IntFilter<"ciudades"> | number
  }

  export type ciudadesOrderByWithRelationInput = {
    id?: SortOrder
    pais?: SortOrder
    ciudad?: SortOrder
    codigoPostal?: SortOrder
  }

  export type ciudadesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ciudadesWhereInput | ciudadesWhereInput[]
    OR?: ciudadesWhereInput[]
    NOT?: ciudadesWhereInput | ciudadesWhereInput[]
    pais?: StringFilter<"ciudades"> | string
    ciudad?: StringFilter<"ciudades"> | string
    codigoPostal?: IntFilter<"ciudades"> | number
  }, "id">

  export type ciudadesOrderByWithAggregationInput = {
    id?: SortOrder
    pais?: SortOrder
    ciudad?: SortOrder
    codigoPostal?: SortOrder
    _count?: ciudadesCountOrderByAggregateInput
    _avg?: ciudadesAvgOrderByAggregateInput
    _max?: ciudadesMaxOrderByAggregateInput
    _min?: ciudadesMinOrderByAggregateInput
    _sum?: ciudadesSumOrderByAggregateInput
  }

  export type ciudadesScalarWhereWithAggregatesInput = {
    AND?: ciudadesScalarWhereWithAggregatesInput | ciudadesScalarWhereWithAggregatesInput[]
    OR?: ciudadesScalarWhereWithAggregatesInput[]
    NOT?: ciudadesScalarWhereWithAggregatesInput | ciudadesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ciudades"> | number
    pais?: StringWithAggregatesFilter<"ciudades"> | string
    ciudad?: StringWithAggregatesFilter<"ciudades"> | string
    codigoPostal?: IntWithAggregatesFilter<"ciudades"> | number
  }

  export type metodoPagoWhereInput = {
    AND?: metodoPagoWhereInput | metodoPagoWhereInput[]
    OR?: metodoPagoWhereInput[]
    NOT?: metodoPagoWhereInput | metodoPagoWhereInput[]
    id?: IntFilter<"metodoPago"> | number
    nombre?: StringFilter<"metodoPago"> | string
  }

  export type metodoPagoOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
  }

  export type metodoPagoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: metodoPagoWhereInput | metodoPagoWhereInput[]
    OR?: metodoPagoWhereInput[]
    NOT?: metodoPagoWhereInput | metodoPagoWhereInput[]
    nombre?: StringFilter<"metodoPago"> | string
  }, "id">

  export type metodoPagoOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    _count?: metodoPagoCountOrderByAggregateInput
    _avg?: metodoPagoAvgOrderByAggregateInput
    _max?: metodoPagoMaxOrderByAggregateInput
    _min?: metodoPagoMinOrderByAggregateInput
    _sum?: metodoPagoSumOrderByAggregateInput
  }

  export type metodoPagoScalarWhereWithAggregatesInput = {
    AND?: metodoPagoScalarWhereWithAggregatesInput | metodoPagoScalarWhereWithAggregatesInput[]
    OR?: metodoPagoScalarWhereWithAggregatesInput[]
    NOT?: metodoPagoScalarWhereWithAggregatesInput | metodoPagoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"metodoPago"> | number
    nombre?: StringWithAggregatesFilter<"metodoPago"> | string
  }

  export type celularesWhereInput = {
    AND?: celularesWhereInput | celularesWhereInput[]
    OR?: celularesWhereInput[]
    NOT?: celularesWhereInput | celularesWhereInput[]
    id?: IntFilter<"celulares"> | number
    marca?: StringFilter<"celulares"> | string
    modelo?: StringFilter<"celulares"> | string
    color?: StringFilter<"celulares"> | string
    precio?: FloatFilter<"celulares"> | number
    sistemaOperativo?: StringFilter<"celulares"> | string
    pantalla?: StringFilter<"celulares"> | string
    RAM?: StringFilter<"celulares"> | string
    almacenamiento?: StringFilter<"celulares"> | string
  }

  export type celularesOrderByWithRelationInput = {
    id?: SortOrder
    marca?: SortOrder
    modelo?: SortOrder
    color?: SortOrder
    precio?: SortOrder
    sistemaOperativo?: SortOrder
    pantalla?: SortOrder
    RAM?: SortOrder
    almacenamiento?: SortOrder
  }

  export type celularesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: celularesWhereInput | celularesWhereInput[]
    OR?: celularesWhereInput[]
    NOT?: celularesWhereInput | celularesWhereInput[]
    marca?: StringFilter<"celulares"> | string
    modelo?: StringFilter<"celulares"> | string
    color?: StringFilter<"celulares"> | string
    precio?: FloatFilter<"celulares"> | number
    sistemaOperativo?: StringFilter<"celulares"> | string
    pantalla?: StringFilter<"celulares"> | string
    RAM?: StringFilter<"celulares"> | string
    almacenamiento?: StringFilter<"celulares"> | string
  }, "id">

  export type celularesOrderByWithAggregationInput = {
    id?: SortOrder
    marca?: SortOrder
    modelo?: SortOrder
    color?: SortOrder
    precio?: SortOrder
    sistemaOperativo?: SortOrder
    pantalla?: SortOrder
    RAM?: SortOrder
    almacenamiento?: SortOrder
    _count?: celularesCountOrderByAggregateInput
    _avg?: celularesAvgOrderByAggregateInput
    _max?: celularesMaxOrderByAggregateInput
    _min?: celularesMinOrderByAggregateInput
    _sum?: celularesSumOrderByAggregateInput
  }

  export type celularesScalarWhereWithAggregatesInput = {
    AND?: celularesScalarWhereWithAggregatesInput | celularesScalarWhereWithAggregatesInput[]
    OR?: celularesScalarWhereWithAggregatesInput[]
    NOT?: celularesScalarWhereWithAggregatesInput | celularesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"celulares"> | number
    marca?: StringWithAggregatesFilter<"celulares"> | string
    modelo?: StringWithAggregatesFilter<"celulares"> | string
    color?: StringWithAggregatesFilter<"celulares"> | string
    precio?: FloatWithAggregatesFilter<"celulares"> | number
    sistemaOperativo?: StringWithAggregatesFilter<"celulares"> | string
    pantalla?: StringWithAggregatesFilter<"celulares"> | string
    RAM?: StringWithAggregatesFilter<"celulares"> | string
    almacenamiento?: StringWithAggregatesFilter<"celulares"> | string
  }

  export type computadoresWhereInput = {
    AND?: computadoresWhereInput | computadoresWhereInput[]
    OR?: computadoresWhereInput[]
    NOT?: computadoresWhereInput | computadoresWhereInput[]
    id?: IntFilter<"computadores"> | number
    marca?: StringFilter<"computadores"> | string
    modelo?: StringFilter<"computadores"> | string
    color?: StringFilter<"computadores"> | string
    precio?: FloatFilter<"computadores"> | number
    sistemaOperativo?: StringFilter<"computadores"> | string
    RAM?: StringFilter<"computadores"> | string
    almacenamiento?: StringFilter<"computadores"> | string
    pantalla?: StringFilter<"computadores"> | string
  }

  export type computadoresOrderByWithRelationInput = {
    id?: SortOrder
    marca?: SortOrder
    modelo?: SortOrder
    color?: SortOrder
    precio?: SortOrder
    sistemaOperativo?: SortOrder
    RAM?: SortOrder
    almacenamiento?: SortOrder
    pantalla?: SortOrder
  }

  export type computadoresWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: computadoresWhereInput | computadoresWhereInput[]
    OR?: computadoresWhereInput[]
    NOT?: computadoresWhereInput | computadoresWhereInput[]
    marca?: StringFilter<"computadores"> | string
    modelo?: StringFilter<"computadores"> | string
    color?: StringFilter<"computadores"> | string
    precio?: FloatFilter<"computadores"> | number
    sistemaOperativo?: StringFilter<"computadores"> | string
    RAM?: StringFilter<"computadores"> | string
    almacenamiento?: StringFilter<"computadores"> | string
    pantalla?: StringFilter<"computadores"> | string
  }, "id">

  export type computadoresOrderByWithAggregationInput = {
    id?: SortOrder
    marca?: SortOrder
    modelo?: SortOrder
    color?: SortOrder
    precio?: SortOrder
    sistemaOperativo?: SortOrder
    RAM?: SortOrder
    almacenamiento?: SortOrder
    pantalla?: SortOrder
    _count?: computadoresCountOrderByAggregateInput
    _avg?: computadoresAvgOrderByAggregateInput
    _max?: computadoresMaxOrderByAggregateInput
    _min?: computadoresMinOrderByAggregateInput
    _sum?: computadoresSumOrderByAggregateInput
  }

  export type computadoresScalarWhereWithAggregatesInput = {
    AND?: computadoresScalarWhereWithAggregatesInput | computadoresScalarWhereWithAggregatesInput[]
    OR?: computadoresScalarWhereWithAggregatesInput[]
    NOT?: computadoresScalarWhereWithAggregatesInput | computadoresScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"computadores"> | number
    marca?: StringWithAggregatesFilter<"computadores"> | string
    modelo?: StringWithAggregatesFilter<"computadores"> | string
    color?: StringWithAggregatesFilter<"computadores"> | string
    precio?: FloatWithAggregatesFilter<"computadores"> | number
    sistemaOperativo?: StringWithAggregatesFilter<"computadores"> | string
    RAM?: StringWithAggregatesFilter<"computadores"> | string
    almacenamiento?: StringWithAggregatesFilter<"computadores"> | string
    pantalla?: StringWithAggregatesFilter<"computadores"> | string
  }

  export type televisoresWhereInput = {
    AND?: televisoresWhereInput | televisoresWhereInput[]
    OR?: televisoresWhereInput[]
    NOT?: televisoresWhereInput | televisoresWhereInput[]
    id?: IntFilter<"televisores"> | number
    marca?: StringFilter<"televisores"> | string
    modelo?: StringFilter<"televisores"> | string
    precio?: FloatFilter<"televisores"> | number
    resolucion?: StringFilter<"televisores"> | string
    sistemaOperativo?: StringFilter<"televisores"> | string
    color?: StringFilter<"televisores"> | string
  }

  export type televisoresOrderByWithRelationInput = {
    id?: SortOrder
    marca?: SortOrder
    modelo?: SortOrder
    precio?: SortOrder
    resolucion?: SortOrder
    sistemaOperativo?: SortOrder
    color?: SortOrder
  }

  export type televisoresWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: televisoresWhereInput | televisoresWhereInput[]
    OR?: televisoresWhereInput[]
    NOT?: televisoresWhereInput | televisoresWhereInput[]
    marca?: StringFilter<"televisores"> | string
    modelo?: StringFilter<"televisores"> | string
    precio?: FloatFilter<"televisores"> | number
    resolucion?: StringFilter<"televisores"> | string
    sistemaOperativo?: StringFilter<"televisores"> | string
    color?: StringFilter<"televisores"> | string
  }, "id">

  export type televisoresOrderByWithAggregationInput = {
    id?: SortOrder
    marca?: SortOrder
    modelo?: SortOrder
    precio?: SortOrder
    resolucion?: SortOrder
    sistemaOperativo?: SortOrder
    color?: SortOrder
    _count?: televisoresCountOrderByAggregateInput
    _avg?: televisoresAvgOrderByAggregateInput
    _max?: televisoresMaxOrderByAggregateInput
    _min?: televisoresMinOrderByAggregateInput
    _sum?: televisoresSumOrderByAggregateInput
  }

  export type televisoresScalarWhereWithAggregatesInput = {
    AND?: televisoresScalarWhereWithAggregatesInput | televisoresScalarWhereWithAggregatesInput[]
    OR?: televisoresScalarWhereWithAggregatesInput[]
    NOT?: televisoresScalarWhereWithAggregatesInput | televisoresScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"televisores"> | number
    marca?: StringWithAggregatesFilter<"televisores"> | string
    modelo?: StringWithAggregatesFilter<"televisores"> | string
    precio?: FloatWithAggregatesFilter<"televisores"> | number
    resolucion?: StringWithAggregatesFilter<"televisores"> | string
    sistemaOperativo?: StringWithAggregatesFilter<"televisores"> | string
    color?: StringWithAggregatesFilter<"televisores"> | string
  }

  export type consolasWhereInput = {
    AND?: consolasWhereInput | consolasWhereInput[]
    OR?: consolasWhereInput[]
    NOT?: consolasWhereInput | consolasWhereInput[]
    id?: IntFilter<"consolas"> | number
    marca?: StringFilter<"consolas"> | string
    modelo?: StringFilter<"consolas"> | string
    precio?: FloatFilter<"consolas"> | number
    color?: StringFilter<"consolas"> | string
    almacenamiento?: StringFilter<"consolas"> | string
    sistemaOperativo?: StringFilter<"consolas"> | string
    RAM?: StringFilter<"consolas"> | string
  }

  export type consolasOrderByWithRelationInput = {
    id?: SortOrder
    marca?: SortOrder
    modelo?: SortOrder
    precio?: SortOrder
    color?: SortOrder
    almacenamiento?: SortOrder
    sistemaOperativo?: SortOrder
    RAM?: SortOrder
  }

  export type consolasWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: consolasWhereInput | consolasWhereInput[]
    OR?: consolasWhereInput[]
    NOT?: consolasWhereInput | consolasWhereInput[]
    marca?: StringFilter<"consolas"> | string
    modelo?: StringFilter<"consolas"> | string
    precio?: FloatFilter<"consolas"> | number
    color?: StringFilter<"consolas"> | string
    almacenamiento?: StringFilter<"consolas"> | string
    sistemaOperativo?: StringFilter<"consolas"> | string
    RAM?: StringFilter<"consolas"> | string
  }, "id">

  export type consolasOrderByWithAggregationInput = {
    id?: SortOrder
    marca?: SortOrder
    modelo?: SortOrder
    precio?: SortOrder
    color?: SortOrder
    almacenamiento?: SortOrder
    sistemaOperativo?: SortOrder
    RAM?: SortOrder
    _count?: consolasCountOrderByAggregateInput
    _avg?: consolasAvgOrderByAggregateInput
    _max?: consolasMaxOrderByAggregateInput
    _min?: consolasMinOrderByAggregateInput
    _sum?: consolasSumOrderByAggregateInput
  }

  export type consolasScalarWhereWithAggregatesInput = {
    AND?: consolasScalarWhereWithAggregatesInput | consolasScalarWhereWithAggregatesInput[]
    OR?: consolasScalarWhereWithAggregatesInput[]
    NOT?: consolasScalarWhereWithAggregatesInput | consolasScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"consolas"> | number
    marca?: StringWithAggregatesFilter<"consolas"> | string
    modelo?: StringWithAggregatesFilter<"consolas"> | string
    precio?: FloatWithAggregatesFilter<"consolas"> | number
    color?: StringWithAggregatesFilter<"consolas"> | string
    almacenamiento?: StringWithAggregatesFilter<"consolas"> | string
    sistemaOperativo?: StringWithAggregatesFilter<"consolas"> | string
    RAM?: StringWithAggregatesFilter<"consolas"> | string
  }

  export type sucursalesCreateInput = {
    departamento: string
    nombre: string
  }

  export type sucursalesUncheckedCreateInput = {
    id?: number
    departamento: string
    nombre: string
  }

  export type sucursalesUpdateInput = {
    departamento?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type sucursalesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    departamento?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type sucursalesCreateManyInput = {
    id?: number
    departamento: string
    nombre: string
  }

  export type sucursalesUpdateManyMutationInput = {
    departamento?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type sucursalesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    departamento?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type ciudadesCreateInput = {
    pais: string
    ciudad: string
    codigoPostal: number
  }

  export type ciudadesUncheckedCreateInput = {
    id?: number
    pais: string
    ciudad: string
    codigoPostal: number
  }

  export type ciudadesUpdateInput = {
    pais?: StringFieldUpdateOperationsInput | string
    ciudad?: StringFieldUpdateOperationsInput | string
    codigoPostal?: IntFieldUpdateOperationsInput | number
  }

  export type ciudadesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    pais?: StringFieldUpdateOperationsInput | string
    ciudad?: StringFieldUpdateOperationsInput | string
    codigoPostal?: IntFieldUpdateOperationsInput | number
  }

  export type ciudadesCreateManyInput = {
    id?: number
    pais: string
    ciudad: string
    codigoPostal: number
  }

  export type ciudadesUpdateManyMutationInput = {
    pais?: StringFieldUpdateOperationsInput | string
    ciudad?: StringFieldUpdateOperationsInput | string
    codigoPostal?: IntFieldUpdateOperationsInput | number
  }

  export type ciudadesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    pais?: StringFieldUpdateOperationsInput | string
    ciudad?: StringFieldUpdateOperationsInput | string
    codigoPostal?: IntFieldUpdateOperationsInput | number
  }

  export type metodoPagoCreateInput = {
    nombre: string
  }

  export type metodoPagoUncheckedCreateInput = {
    id?: number
    nombre: string
  }

  export type metodoPagoUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type metodoPagoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type metodoPagoCreateManyInput = {
    id?: number
    nombre: string
  }

  export type metodoPagoUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type metodoPagoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
  }

  export type celularesCreateInput = {
    marca: string
    modelo: string
    color: string
    precio: number
    sistemaOperativo: string
    pantalla: string
    RAM: string
    almacenamiento: string
  }

  export type celularesUncheckedCreateInput = {
    id?: number
    marca: string
    modelo: string
    color: string
    precio: number
    sistemaOperativo: string
    pantalla: string
    RAM: string
    almacenamiento: string
  }

  export type celularesUpdateInput = {
    marca?: StringFieldUpdateOperationsInput | string
    modelo?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    sistemaOperativo?: StringFieldUpdateOperationsInput | string
    pantalla?: StringFieldUpdateOperationsInput | string
    RAM?: StringFieldUpdateOperationsInput | string
    almacenamiento?: StringFieldUpdateOperationsInput | string
  }

  export type celularesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    marca?: StringFieldUpdateOperationsInput | string
    modelo?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    sistemaOperativo?: StringFieldUpdateOperationsInput | string
    pantalla?: StringFieldUpdateOperationsInput | string
    RAM?: StringFieldUpdateOperationsInput | string
    almacenamiento?: StringFieldUpdateOperationsInput | string
  }

  export type celularesCreateManyInput = {
    id?: number
    marca: string
    modelo: string
    color: string
    precio: number
    sistemaOperativo: string
    pantalla: string
    RAM: string
    almacenamiento: string
  }

  export type celularesUpdateManyMutationInput = {
    marca?: StringFieldUpdateOperationsInput | string
    modelo?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    sistemaOperativo?: StringFieldUpdateOperationsInput | string
    pantalla?: StringFieldUpdateOperationsInput | string
    RAM?: StringFieldUpdateOperationsInput | string
    almacenamiento?: StringFieldUpdateOperationsInput | string
  }

  export type celularesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    marca?: StringFieldUpdateOperationsInput | string
    modelo?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    sistemaOperativo?: StringFieldUpdateOperationsInput | string
    pantalla?: StringFieldUpdateOperationsInput | string
    RAM?: StringFieldUpdateOperationsInput | string
    almacenamiento?: StringFieldUpdateOperationsInput | string
  }

  export type computadoresCreateInput = {
    marca: string
    modelo: string
    color: string
    precio: number
    sistemaOperativo: string
    RAM: string
    almacenamiento: string
    pantalla: string
  }

  export type computadoresUncheckedCreateInput = {
    id?: number
    marca: string
    modelo: string
    color: string
    precio: number
    sistemaOperativo: string
    RAM: string
    almacenamiento: string
    pantalla: string
  }

  export type computadoresUpdateInput = {
    marca?: StringFieldUpdateOperationsInput | string
    modelo?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    sistemaOperativo?: StringFieldUpdateOperationsInput | string
    RAM?: StringFieldUpdateOperationsInput | string
    almacenamiento?: StringFieldUpdateOperationsInput | string
    pantalla?: StringFieldUpdateOperationsInput | string
  }

  export type computadoresUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    marca?: StringFieldUpdateOperationsInput | string
    modelo?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    sistemaOperativo?: StringFieldUpdateOperationsInput | string
    RAM?: StringFieldUpdateOperationsInput | string
    almacenamiento?: StringFieldUpdateOperationsInput | string
    pantalla?: StringFieldUpdateOperationsInput | string
  }

  export type computadoresCreateManyInput = {
    id?: number
    marca: string
    modelo: string
    color: string
    precio: number
    sistemaOperativo: string
    RAM: string
    almacenamiento: string
    pantalla: string
  }

  export type computadoresUpdateManyMutationInput = {
    marca?: StringFieldUpdateOperationsInput | string
    modelo?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    sistemaOperativo?: StringFieldUpdateOperationsInput | string
    RAM?: StringFieldUpdateOperationsInput | string
    almacenamiento?: StringFieldUpdateOperationsInput | string
    pantalla?: StringFieldUpdateOperationsInput | string
  }

  export type computadoresUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    marca?: StringFieldUpdateOperationsInput | string
    modelo?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    sistemaOperativo?: StringFieldUpdateOperationsInput | string
    RAM?: StringFieldUpdateOperationsInput | string
    almacenamiento?: StringFieldUpdateOperationsInput | string
    pantalla?: StringFieldUpdateOperationsInput | string
  }

  export type televisoresCreateInput = {
    marca: string
    modelo: string
    precio: number
    resolucion: string
    sistemaOperativo: string
    color: string
  }

  export type televisoresUncheckedCreateInput = {
    id?: number
    marca: string
    modelo: string
    precio: number
    resolucion: string
    sistemaOperativo: string
    color: string
  }

  export type televisoresUpdateInput = {
    marca?: StringFieldUpdateOperationsInput | string
    modelo?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    resolucion?: StringFieldUpdateOperationsInput | string
    sistemaOperativo?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
  }

  export type televisoresUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    marca?: StringFieldUpdateOperationsInput | string
    modelo?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    resolucion?: StringFieldUpdateOperationsInput | string
    sistemaOperativo?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
  }

  export type televisoresCreateManyInput = {
    id?: number
    marca: string
    modelo: string
    precio: number
    resolucion: string
    sistemaOperativo: string
    color: string
  }

  export type televisoresUpdateManyMutationInput = {
    marca?: StringFieldUpdateOperationsInput | string
    modelo?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    resolucion?: StringFieldUpdateOperationsInput | string
    sistemaOperativo?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
  }

  export type televisoresUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    marca?: StringFieldUpdateOperationsInput | string
    modelo?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    resolucion?: StringFieldUpdateOperationsInput | string
    sistemaOperativo?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
  }

  export type consolasCreateInput = {
    marca: string
    modelo: string
    precio: number
    color: string
    almacenamiento: string
    sistemaOperativo: string
    RAM: string
  }

  export type consolasUncheckedCreateInput = {
    id?: number
    marca: string
    modelo: string
    precio: number
    color: string
    almacenamiento: string
    sistemaOperativo: string
    RAM: string
  }

  export type consolasUpdateInput = {
    marca?: StringFieldUpdateOperationsInput | string
    modelo?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    almacenamiento?: StringFieldUpdateOperationsInput | string
    sistemaOperativo?: StringFieldUpdateOperationsInput | string
    RAM?: StringFieldUpdateOperationsInput | string
  }

  export type consolasUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    marca?: StringFieldUpdateOperationsInput | string
    modelo?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    almacenamiento?: StringFieldUpdateOperationsInput | string
    sistemaOperativo?: StringFieldUpdateOperationsInput | string
    RAM?: StringFieldUpdateOperationsInput | string
  }

  export type consolasCreateManyInput = {
    id?: number
    marca: string
    modelo: string
    precio: number
    color: string
    almacenamiento: string
    sistemaOperativo: string
    RAM: string
  }

  export type consolasUpdateManyMutationInput = {
    marca?: StringFieldUpdateOperationsInput | string
    modelo?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    almacenamiento?: StringFieldUpdateOperationsInput | string
    sistemaOperativo?: StringFieldUpdateOperationsInput | string
    RAM?: StringFieldUpdateOperationsInput | string
  }

  export type consolasUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    marca?: StringFieldUpdateOperationsInput | string
    modelo?: StringFieldUpdateOperationsInput | string
    precio?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    almacenamiento?: StringFieldUpdateOperationsInput | string
    sistemaOperativo?: StringFieldUpdateOperationsInput | string
    RAM?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type sucursalesCountOrderByAggregateInput = {
    id?: SortOrder
    departamento?: SortOrder
    nombre?: SortOrder
  }

  export type sucursalesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type sucursalesMaxOrderByAggregateInput = {
    id?: SortOrder
    departamento?: SortOrder
    nombre?: SortOrder
  }

  export type sucursalesMinOrderByAggregateInput = {
    id?: SortOrder
    departamento?: SortOrder
    nombre?: SortOrder
  }

  export type sucursalesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type ciudadesCountOrderByAggregateInput = {
    id?: SortOrder
    pais?: SortOrder
    ciudad?: SortOrder
    codigoPostal?: SortOrder
  }

  export type ciudadesAvgOrderByAggregateInput = {
    id?: SortOrder
    codigoPostal?: SortOrder
  }

  export type ciudadesMaxOrderByAggregateInput = {
    id?: SortOrder
    pais?: SortOrder
    ciudad?: SortOrder
    codigoPostal?: SortOrder
  }

  export type ciudadesMinOrderByAggregateInput = {
    id?: SortOrder
    pais?: SortOrder
    ciudad?: SortOrder
    codigoPostal?: SortOrder
  }

  export type ciudadesSumOrderByAggregateInput = {
    id?: SortOrder
    codigoPostal?: SortOrder
  }

  export type metodoPagoCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
  }

  export type metodoPagoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type metodoPagoMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
  }

  export type metodoPagoMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
  }

  export type metodoPagoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type celularesCountOrderByAggregateInput = {
    id?: SortOrder
    marca?: SortOrder
    modelo?: SortOrder
    color?: SortOrder
    precio?: SortOrder
    sistemaOperativo?: SortOrder
    pantalla?: SortOrder
    RAM?: SortOrder
    almacenamiento?: SortOrder
  }

  export type celularesAvgOrderByAggregateInput = {
    id?: SortOrder
    precio?: SortOrder
  }

  export type celularesMaxOrderByAggregateInput = {
    id?: SortOrder
    marca?: SortOrder
    modelo?: SortOrder
    color?: SortOrder
    precio?: SortOrder
    sistemaOperativo?: SortOrder
    pantalla?: SortOrder
    RAM?: SortOrder
    almacenamiento?: SortOrder
  }

  export type celularesMinOrderByAggregateInput = {
    id?: SortOrder
    marca?: SortOrder
    modelo?: SortOrder
    color?: SortOrder
    precio?: SortOrder
    sistemaOperativo?: SortOrder
    pantalla?: SortOrder
    RAM?: SortOrder
    almacenamiento?: SortOrder
  }

  export type celularesSumOrderByAggregateInput = {
    id?: SortOrder
    precio?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type computadoresCountOrderByAggregateInput = {
    id?: SortOrder
    marca?: SortOrder
    modelo?: SortOrder
    color?: SortOrder
    precio?: SortOrder
    sistemaOperativo?: SortOrder
    RAM?: SortOrder
    almacenamiento?: SortOrder
    pantalla?: SortOrder
  }

  export type computadoresAvgOrderByAggregateInput = {
    id?: SortOrder
    precio?: SortOrder
  }

  export type computadoresMaxOrderByAggregateInput = {
    id?: SortOrder
    marca?: SortOrder
    modelo?: SortOrder
    color?: SortOrder
    precio?: SortOrder
    sistemaOperativo?: SortOrder
    RAM?: SortOrder
    almacenamiento?: SortOrder
    pantalla?: SortOrder
  }

  export type computadoresMinOrderByAggregateInput = {
    id?: SortOrder
    marca?: SortOrder
    modelo?: SortOrder
    color?: SortOrder
    precio?: SortOrder
    sistemaOperativo?: SortOrder
    RAM?: SortOrder
    almacenamiento?: SortOrder
    pantalla?: SortOrder
  }

  export type computadoresSumOrderByAggregateInput = {
    id?: SortOrder
    precio?: SortOrder
  }

  export type televisoresCountOrderByAggregateInput = {
    id?: SortOrder
    marca?: SortOrder
    modelo?: SortOrder
    precio?: SortOrder
    resolucion?: SortOrder
    sistemaOperativo?: SortOrder
    color?: SortOrder
  }

  export type televisoresAvgOrderByAggregateInput = {
    id?: SortOrder
    precio?: SortOrder
  }

  export type televisoresMaxOrderByAggregateInput = {
    id?: SortOrder
    marca?: SortOrder
    modelo?: SortOrder
    precio?: SortOrder
    resolucion?: SortOrder
    sistemaOperativo?: SortOrder
    color?: SortOrder
  }

  export type televisoresMinOrderByAggregateInput = {
    id?: SortOrder
    marca?: SortOrder
    modelo?: SortOrder
    precio?: SortOrder
    resolucion?: SortOrder
    sistemaOperativo?: SortOrder
    color?: SortOrder
  }

  export type televisoresSumOrderByAggregateInput = {
    id?: SortOrder
    precio?: SortOrder
  }

  export type consolasCountOrderByAggregateInput = {
    id?: SortOrder
    marca?: SortOrder
    modelo?: SortOrder
    precio?: SortOrder
    color?: SortOrder
    almacenamiento?: SortOrder
    sistemaOperativo?: SortOrder
    RAM?: SortOrder
  }

  export type consolasAvgOrderByAggregateInput = {
    id?: SortOrder
    precio?: SortOrder
  }

  export type consolasMaxOrderByAggregateInput = {
    id?: SortOrder
    marca?: SortOrder
    modelo?: SortOrder
    precio?: SortOrder
    color?: SortOrder
    almacenamiento?: SortOrder
    sistemaOperativo?: SortOrder
    RAM?: SortOrder
  }

  export type consolasMinOrderByAggregateInput = {
    id?: SortOrder
    marca?: SortOrder
    modelo?: SortOrder
    precio?: SortOrder
    color?: SortOrder
    almacenamiento?: SortOrder
    sistemaOperativo?: SortOrder
    RAM?: SortOrder
  }

  export type consolasSumOrderByAggregateInput = {
    id?: SortOrder
    precio?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use sucursalesDefaultArgs instead
     */
    export type sucursalesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = sucursalesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ciudadesDefaultArgs instead
     */
    export type ciudadesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ciudadesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use metodoPagoDefaultArgs instead
     */
    export type metodoPagoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = metodoPagoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use celularesDefaultArgs instead
     */
    export type celularesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = celularesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use computadoresDefaultArgs instead
     */
    export type computadoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = computadoresDefaultArgs<ExtArgs>
    /**
     * @deprecated Use televisoresDefaultArgs instead
     */
    export type televisoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = televisoresDefaultArgs<ExtArgs>
    /**
     * @deprecated Use consolasDefaultArgs instead
     */
    export type consolasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = consolasDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}